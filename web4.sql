-- phpMyAdmin SQL Dump
-- version 4.9.2
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1:3308
-- Generation Time: Jul 11, 2020 at 04:57 PM
-- Server version: 8.0.18
-- PHP Version: 7.3.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `web`
--

-- --------------------------------------------------------

--
-- Table structure for table `account`
--

DROP TABLE IF EXISTS `account`;
CREATE TABLE IF NOT EXISTS `account` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `Username` varchar(200) NOT NULL,
  `Password` varchar(200) NOT NULL,
  `Email` varchar(200) NOT NULL,
  PRIMARY KEY (`Id`,`Username`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `account`
--

INSERT INTO `account` (`Id`, `Username`, `Password`, `Email`) VALUES
(1, 'daothuanf9', '8e6249fe3ca12fe53e4de5a0eb92de7a', 'thuanpro2025@gmail.com'),
(2, 'daothuanf3', '8e6249fe3ca12fe53e4de5a0eb92de7a', 'thuanpro2025@gmail.com');

-- --------------------------------------------------------

--
-- Table structure for table `admin`
--

DROP TABLE IF EXISTS `admin`;
CREATE TABLE IF NOT EXISTS `admin` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `Username_ad` varchar(200) NOT NULL,
  `Password_ad` varchar(200) NOT NULL,
  `Email_ad` varchar(200) NOT NULL,
  PRIMARY KEY (`Id`,`Username_ad`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `admin`
--

INSERT INTO `admin` (`Id`, `Username_ad`, `Password_ad`, `Email_ad`) VALUES
(1, 'phuhoaibao', 'bc856a26d13a868517494d9acd2118aa', 'phuhoaibao1@gmail.com'),
(2, 'havuongquoc', 'bc856a26d13a868517494d9acd2118aa', 'havuongquoc2000@gmail.com'),
(3, 'phamhoanhquan', 'bc856a26d13a868517494d9acd2118aa', 'phamhoanhquan2000@gmail.com'),
(4, 'thuanpro2025', 'bc856a26d13a868517494d9acd2118aa', 'thuanpro2025@gmail.com');

-- --------------------------------------------------------

--
-- Table structure for table `document`
--

DROP TABLE IF EXISTS `document`;
CREATE TABLE IF NOT EXISTS `document` (
  `MaMH` varchar(30) CHARACTER SET utf8 NOT NULL,
  `TenMH` varchar(200) CHARACTER SET utf8 NOT NULL,
  `Phan1` text CHARACTER SET utf8 NOT NULL,
  `Phan2` text CHARACTER SET utf8,
  `Phan3` text CHARACTER SET utf8,
  `Phan4` text CHARACTER SET utf8,
  `MaLevel` varchar(30) CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`MaMH`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `document`
--

INSERT INTO `document` (`MaMH`, `TenMH`, `Phan1`, `Phan2`, `Phan3`, `Phan4`, `MaLevel`) VALUES
('E1', 'ENGLISH', 'There are some things money cannot buy. Love, health… and a comfortable way to avoid traffic in congested cities. Bicycles, motorcycles, and helicopters are great for avoiding traffic, but they all have their shortcomings. A discerning executive who values comfort also wants a way to commute in busy metropolitan areas.', 'The car is for people who appreciate bespoke elegance, yet still see that all the ultra-luxury vehicles on the market today mean hours spent in traffic. The Leia Gabriel LUV offers a solution to that problem.\r\n\r\nThis electric vehicle is able to use the high-occupancy vehicle lanes (also called bus lanes) in many cities. And due to its small size, it can also fit in many unconventional parking spaces.', 'The car is 86 cm wide and 340 cm long (34 in x 134 in), and includes some high-tech handling capabilities, making it safer at high speeds and highly maneuverable. These two factors alone save precious minutes while commuting to work or rushing to important meetings.\r\n\r\nThere are other electric runabouts on the market. However, no other manufacturer equips its cars with this level of comfort and attention to detail. The LUV includes a hand-stitched leather interior, carbon fiber elements and fully ergonomic controls, meaning drivers never need to take their eyes off the road.', 'The LUV carries two people in absolute comfort. Placing the seats in a tandem formation reduces the width of the car, and enables a more aerodynamic shape, reducing drag and increasing efficiency. The LUV will have a top speed of over 160 km/h (100 mph) and a range of 160 km (100 miles) on a single charge. This makes it perfect for weekend getaways outside town, and city commutes.\r\n\r\nWith its adaptable luggage compartment, two people can travel while carrying the essentials. Meanwhile, when the back seat is vacant, the luggage space expands to accommodate more items. The latest-generation Li-ion battery-pack on board meets all the current industry standards, meaning it charges quickly, allowing for an even greater range.\r\n\r\n The back seat includes all standard industry safety fittings. Parents can use child seats when traveling with their children, knowing that they are cocooned in a safe monocoque chassis, which meets all federal and international standards.', 'cb'),
('JS1', 'JAVASCRIPT', 'JavaScript (viết tắt là \'js\') là một ngôn ngữ lập trình mang đầy đủ tính năng của một ngôn ngữ lập trình động mà khi nó được áp dụng vào một tài liệu HTML, nó có thể đem lại khả năng tương tác động trên các trang web. Cha đẻ của ngôn ngữ này là Brendan Eich, đồng sáng lập dự án Mozilla, quỹ Mozilla, và tập đoàn Mozilla.', 'JavaScript thật sự rất linh hoạt. Bạn có thể bắt đầu với các bước nhỏ, với thư viện ảnh, bố cục có tính thay đổi và phản hồi đến các nút nhấn. Khi có nhiều kinh nghiệm hơn, bạn có thể tạo ra các trò chơi, hoạt họa 2D hoặc 3D, ứng dụng cơ sở dữ liệu toàn diện và nhiều thứ khác!\r\n\r\nBản thân Javascript là một ngôn ngữ linh động. Các nhà phát triển đã viết ra một số lượng lớn các công cụ thuộc top của core Javascript, mở ra một lượng lớn tính năng bổ sung với ít nỗ lực nhất. Nó bao gồm:\r\n\r\nGiao diện lập trình ứng dụng trên trình duyệt (API) — Các API được xây dựng bên trong các trình duyệt web, cung cấp tính năng như tạo HTML động, cài đặt CSS, thu tập và điều khiển video trực tiếp từ webcam của người dùng hoặc sinh ra đồ dọa 3D và các mẫu audio.\r\nCác API bên thứ ba cho phép nhà phát triển kết hợp tính năng trong website của họ từ người cung cấp nội dung khác chẳng hạn như Twitter hay Facebook.\r\nTừ các framework và thư viện bên thứ ba bạn có thể áp dụng tới tài liệu HTML của bạn, cho phép bạn nhanh chóng xây dựng được các trang web và các ứng dụng.', ' Phần phía dưới có thể nghe thật thú vị. JavaScript là một trong những công nghệ web sống động nhất và nếu như bạn sử dụng thật tốt, các website của bạn sẽ mang tính sáng tạo và đầy sức mạnh.\r\n\r\nTuy nhiên, nắm bắt Javascript sẽ có một chút khó hơn so  với HTML và CSS. Bạn có thể phải bắt đầu từng bước nhỏ và giữ cho quá trình làm việc luôn nhất quán. Để bắt đầu, chúng tôi sẽ biểu diễn cách làm thế nào để thêm những đoạn JavaScript cơ bản tới trang web, tạo ví dụ \'Hello world\' ', ' Vì bài viết này chỉ giới thiệu về JavaScript, chúng tôi sẽ không làm bạn bối rối khi nói rõ hơn về sự khác nhau giữa mã nguồn JavaScript căn bản và những công cụ được liệt kê ở trên. Bạn có thể tìm hiểu chi tiết trong  Mục học JavaScript, và MDN.\r\n\r\nỞ phần dưới chúng tôi sẽ giới thiệu cho bạn một số khía cạnh cơ bản về JavaScript và bạn cũng sẽ được làm việc với một vài API. Chúc bạn học tốt!', 'cb'),
('E2', 'ENGLISH', 'e, THE đi với Adj để tạo thành N:\r\n\r\nCẤU TRÚC: THE + ADJ = N\r\n \r\n\r\nVD:    The rich = rich people: những người giàu\r\n\r\nThe poor = poor people: những người nghèo\r\n\r\nThe young = young people: những người trẻ tuổi\r\n\r\nf, THE + số thứ tự\r\n\r\nVD:    the first, the second, the third, etc.\r\n\r\nThe fifth time: lần thứ 5\r\n\r\nThe 23th of October: ngày 23/10\r\n\r\ng, THE + từ chỉ biển, sông, khách sạn, quán bar, tên ban nhạc, tên các dãy núi\r\n\r\nVD: The Nile, the Huong Giang hotel, the Mekong river, the Himalaya, the westlife, the Backstreetboy….\r\n\r\nh, Chỉ quốc tịch:\r\n\r\nVD: The Vietnamese, the Chinese, the Japanese, the American, etc.\r\n\r\ni, Trước tên của tập hợp nhiều bang, nhiều nước:\r\n\r\nVD: The Philippines, the United Nations, the United States, etc.\r\n\r\nk, THE + tên loài vật số ít chỉ toàn thể loài ấy\r\n\r\nCẤU TRÚC: THE + N (động vật) số ít = N (động vật) số nhiều\r\n \r\n\r\nVD: The tiger = tigers: loài hổ\r\n\r\nWe are finding ways to protect the rhinos (rhinos) from extinction.\r\n\r\nl, THE + N + mệnh đề quan hệ\r\n\r\nCẤU TRÚC: THE + N + WHO/ WHICH/ THAT/ WHEN/ WHERE/… + S + V\r\n \r\n\r\nVD: The person who I love most is my mother.\r\n\r\nm, THE + N + in + N\r\n\r\nCẤU TRÚC: THE + N + in + trang phục\r\n \r\n\r\nVD: The girl in blue dress is my sister.\r\n\r\nIV/ CÁC TRƯỜNG HỢP KHÔNG DÙNG MẠO TỪ\r\n\r\nTrước danh từ đếm được số nhiều, và danh từ không đếm được nói chung\r\nVD:\r\n\r\nVới danh từ đếm được số nhiều: Books are good friends.\r\n\r\nVới danh từ không đếm được: Milk is good for you.\r\n\r\nTrước một số danh từ chỉ tên nước, đường phố, thị xã, ngôn ngữ, sân bay, nhà ga, bữa ăn, núi\r\nVD:    England is a large country.\r\n\r\nI live in hanoi.\r\n\r\nMy house is in Quang Trung street.\r\n\r\nThey live near Noi Bai airport.\r\n\r\nEverest is the highest mountain in the world.\r\n\r\nTRƯỜNG HỢP ĐẶC BIỆT\r\nTrước một số địa điểm công cộng như trường học, nhà thờ, nhà tù,…\r\n\r\no   Ta không dùng mạo từ khi đến đó với đúng mục đích sử dụng\r\n\r\no   Dùng mạo từ “the” khi ta đến đó với mục đích khác\r\n\r\nVD:    At/in/ to (the) school/university/college\r\n\r\nI go to school: Tôi đến trường (để học).\r\n\r\nI go to the school to attend the parents meeting: Tôi đến trường (để họp phụ huynh).\r\n\r\nIn (the) church\r\n\r\nWe pray in church every Sundays: Chúng tôi đi cầu kinh mỗi Chủ nhật. (đến nhà thờ cầu nguyện)\r\n\r\nWe planned to meet in the church: Tôi đi đến nhà thờ (để chơi hoặc gặp mặt ai đó).\r\n\r\nIn (the) prison\r\n\r\nHe is in prison now: Hắn đang bị nhốt trong tù (ở tù vì phạm tội).\r\n\r\nShe went to the prison to see if he was fine: Cô ấy đến tù thăm xem hắn có ổn không (đến tù thăm tù nhân).', 'CẤU TRÚC:\r\n\r\na, Chủ ngữ giả trong câu:\r\n\r\n \r\n\r\nIt + was/ is + adj + to V: thật là như thế nào khi làm gì\r\nVD:    It’s very interesting to learn English.\r\n\r\nIt was difficult to find the lost kid in such a dark night.\r\n\r\nb, Chủ ngữ giả khi nói về thời gian:\r\n\r\n \r\n\r\n– How long does/ did it take + ĐTTN + to V?\r\n– It takes/ took + ĐTTN + thời gian + to V.\r\n\r\n \r\n\r\nVD:    – How long does it take you to get to school?\r\n\r\n– It takes me 20 minutes to get to school.\r\n\r\nc, Chủ ngữ giả trong câu nói khoảng cách\r\n\r\n \r\n\r\n– How far is it from…to…?\r\n– It’s + khoảng cách + from…to…\r\n\r\n \r\n\r\nVD:    – How far is it from your house to the nearest bus stop.\r\n\r\n– It’s 2 meters from my house to the nearest bus stop.\r\n\r\nd, Chủ ngữ giả khi nói về nhiệt độ, số đo\r\n\r\n \r\n\r\nIt’s + nhiệt độ/ số đo.\r\n \r\n\r\nVD:    It’s 30 Celsius degrees today.\r\n\r\nIt’s 100 meters long.\r\n\r\nb, Tân ngữ giả:\r\n\r\n \r\n\r\nS + find/ found + it + adj + to V\r\n \r\n\r\nVD:    I found it difficult to do homework.\r\n\r\nThe girl finds it boring to watch the performance.\r\n\r\nNgười ta còn kết hợp ‘it’ với tobe trong cấu trúc nhấn mạnh.CẤU TRÚC:\r\n\r\na, Nhấn mạnh chủ ngữ\r\n\r\n \r\n\r\nIt + is/was + S + that + V + O\r\nVD:    It was he that saved the child from the fire last night.\r\n\r\nIt is my father that I adore most.\r\n\r\nb, Nhấn mạnh tân ngữ\r\n\r\nIt + is/was + O + that S + V\r\n \r\n\r\nVD:    It’s him that she loves.\r\n\r\nIt was the movie that she watched last week.\r\n\r\nc, Nhấn mạnh trạng ngữ\r\n\r\n \r\n\r\nIt + is/was + Adv + that S + V + O\r\nVD:\r\n\r\nNhấn mạnh trạng từ chỉ thời gian:\r\n\r\nIt is in 1998 that I was born.\r\n\r\nNhấn mạnh trạng từ chỉ nơi chốn:\r\n\r\nIt was in the living room that we were doing homework at 9 p.m last night.\r\n\r\n ', 'II/ TÍNH TỪ SỞ HỮU và ĐẠI TỪ SỞ HỮU\r\n\r\nTính từ sở hữu (TTSH) luôn kết hợp với danh từ, tạo thành chủ ngữ hoặc vị ngữ trong câu.\r\nĐại từ sở hữu (ĐTSH) được dùng thay tính từ sở hữu và danh từ đã được nhắc đến. Dùng trả lời câu hỏi “whom”.\r\n \r\n\r\nCẤU TRÚC: TTSH + N = ĐTSH\r\n \r\n\r\nVD:    Our books are black. Theirs (their books) are blue.\r\n\r\nHer hair color is different from yours (your hair).', 'IV/ ĐẠI TỪ TÂN NGỮ\r\n\r\nĐại từ tân ngữ (ĐTTN) luôn đứng sau động từ và làm tân ngữ cho động từ đó.\r\n\r\n \r\n\r\nCẤU TRÚC: S + V + ĐTTN\r\n \r\n\r\nVD:    My mother doesn’t like him.\r\n\r\nHer sister bought her a cat but didn’t like it.\r\n\r\n \r\n\r\nV/ ĐẠI TỪ PHẢN THÂN\r\n\r\nĐại từ phản thân (ĐTPT) thường đứng sau chủ ngữ, mang nghĩa nhấn mạnh (Chính là…)\r\n \r\n\r\nCẤU TRÚC: S + ĐTPT + V + O\r\n \r\n\r\nVD:    I myself painted the walls.\r\n\r\nAlan claimed that he himself did all the work.\r\n\r\n \r\n\r\nĐôi khi, ĐTPT có thể đứng cuối câu, sau động từ, mang nghĩa phản thân (tự mình)\r\n \r\n\r\nCẤU TRÚC: S + V + O + ĐTPT (làm việc gì đó một mình – alone)\r\n \r\n\r\nVD: The 5-year-old boy cannot go to school himself.\r\n\r\nShe shouldn’t go out at night herself.\r\n\r\nTa dùng giới từ by trước ĐTPT trong một số trường hợp đặc biệt.\r\n \r\n\r\nCẤU TRÚC: S + V + O + by ĐTPT (tự mình làm việc gì đó – without help)\r\n \r\n\r\nVD: They completed the painting by themselves last month.\r\n\r\nShe has been learning French by herself.', 'tb1'),
('E3', 'ENGLISH', 'DANH TỪ ĐẾM ĐƯỢC	DANH TỪ KHÔNG ĐẾM ĐƯỢC\r\n–         Chỉ đối tượng đếm được\r\n–         Có dạng số ít & số nhiều.\r\n\r\n–         Chỉ đối tượng không đếm được\r\n–         Chỉ có dạng số ít.\r\n\r\n\r\nDANH TỪ ĐẾM ĐƯỢC\r\n\r\nDanh từ đếm được (countable nouns) là những danh từchỉ người/ sự vật/ sự việc có thể đếm được. (xét về nghĩa)\r\n \r\n\r\nVD: girl, picture, ruler, cat, chair, tree, apple, etc.\r\n\r\n \r\n\r\nChúng có dạng số ít (Single) và số nhiều (Plural).\r\nKhi ở dạng số ít, chúng có thể kết hợp với a/ an.\r\nVD:    A fan, a bag, a school, a book, a theater, a refrigerator, etc.\r\n\r\nAn umbrella, an apple, an orange, an elephant, an ox, etc.\r\n\r\nKhi ở dạng số nhiều, chúng có thể kết hợp với some/ any/ many/ a lot of/…\r\nVD:    Some fans, some bags, some schools, etc.\r\n\r\nAny theater, any refrigerator, any umbrella, etc.\r\n\r\nA lot of apples, a lot of oranges, a lot of elephants, etc.\r\n\r\nVới hầu hết các danh từ đếm được, ta thêm –s hoặc –es để chuyển từ dạng số ít sang số nhiều.\r\nVD:\r\n\r\nThêm –s: phone => phones, bear => bears, dog => dogs, etc.\r\n\r\nThêm –es: watch => watches, brush => brushes, box => boxes, etc.\r\n\r\nDanh từ đếm được không đi đơn lẻ, trước danh từsố ít chúng ta luôn phải dùng mạo từ “a/an”.\r\nVD:    That’s a good idea.\r\nDo you need an umbrella?', '*CÁCH CHUYỂN DANH TỪ SỐ ÍT SANG SỐ NHIỀU\r\n\r\n \r\n\r\nQuy tắc	Dạng số ít	Dạng số nhiều\r\n1.      Thêm –s\r\n(Hầu hết các trường hợp)\r\n\r\nCat\r\nPen\r\n\r\nTree\r\n\r\nMotorbike\r\n\r\nMachine\r\n\r\nCats\r\nPens\r\n\r\nTrees\r\n\r\nMotorbikes\r\n\r\nMachines\r\n\r\n2.      Thêm –es\r\n(kết thúc: o, x, s, z, ch, sh)\r\n\r\nTomato\r\nFox\r\n\r\nBus\r\n\r\nSandwich\r\n\r\nBush\r\n\r\nTomatoes\r\nFoxes\r\n\r\nBuses\r\n\r\nSandwiches\r\n\r\nBushes\r\n\r\n3.      Chuyển –y => –ies \r\n(Phụ âm + y\r\n\r\nKhông áp dụng với nguyên âm + y)\r\n\r\nParty\r\nTrophy\r\n\r\n \r\n\r\nParties\r\nTrophies\r\n\r\n \r\n\r\n4.      Chuyển f/fe => ves\r\n(kết thúc f)\r\n\r\nLeaf\r\nLoaf\r\n\r\nWife\r\n\r\nKnife\r\n\r\nLeaves\r\nLoaves\r\n\r\nWives\r\n\r\nKnives\r\n\r\n5.      Giữ nguyên\r\n \r\n\r\nMoney\r\nSheep\r\n\r\nFish\r\n\r\nMoney\r\nSheep\r\n\r\nFish\r\n\r\n6.      Chuyển đặc biệt	Child\r\nPerson\r\n\r\nTooth\r\n\r\nFoot\r\n\r\nMan/ woman\r\n\r\n \r\n\r\nChildren\r\nPeople\r\n\r\nTeeth\r\n\r\nFeet\r\n\r\nMen/ women\r\n\r\n \r\n\r\n \r\n\r\nQUY TẮC PHÁT ÂM ĐUÔI –S/ES\r\n \r\n\r\n♥/ɪz/ với từ tận cùng /s/, /z/, /ʃ/, /ʒ/, /tʃ/, /dʒ/ (âm gió)\r\n\r\nVD: Kisses /kɪsiz/, dozes /dəʊziz/, washes /wɒʃiz/, watches /wɒtʃiz/,…\r\n\r\n\r\n \r\n♥/s/ với từ tận cùng /θ/, /f/, /k/, /p/, /t/ (âm không rung) (thời fong kiến phương tây)\r\n\r\nVD: waits /weɪts/, laughes /lɑːfs/, books /bʊks/, jumps /dʒʌmps/,…\r\n\r\n♥/z/ các trường hợp còn lại\r\n\r\nVD: names /neɪmz/, friends /frendz/, families/ˈfæm.əl.iz/, affairs /əˈfeərz/,…\r\n\r\n \r\n\r\nNOTE: Xác định cách đọc đuôi –ed, -es là dựa vào PHIÊN ÂM của phụ âm cuối, không phải mặt chữ. Trường hợp cần đặc biệt lưu ý là đuôi –se:\r\n\r\nĐuôi –se đọc là /z/ => Quá khứ thêm -d đọc là /d/, số nhiều thêm –s đọc là /iz/\r\nVD: Pleased /pliːzd/, Pauses /pɔːziz/,…\r\n\r\nĐuôi -se đọc là /s/ => Quá khứ thêm –d đọc là /t/, số nhiều thêm –s đọc là /iz/\r\nVD: Released /rɪˈliːst/, Converses /kənˈvɜːsiz/,…', 'DANH TỪ KHÔNG ĐẾM ĐƯỢC\r\n\r\n \r\n\r\nDanh từ không đếm được (uncountable nouns) là những danh từ chỉ người/ sự vật/ sự việc không đếm được. (xét về nghĩa)\r\nHầu hết các món ăn là danh từ không đếm được.\r\nVD: rice, coffee, bread, juice, milk, chicken, beef, cooking oil, water, etc.\r\n\r\nVì thế chúng chỉ có dạng số ít mà không có dạng số nhiều.\r\nDanh từ không đếm được dùng chỉ đối tượng trừu tượng ( như sự tin tưởng, lời khuyên…) hoặc những tập hợp ( như hành lý, vật dụng…)\r\nTrước những danh từkhông đếm được, chúng ta có thể dùng the, some, any, much, mà không thể dùng “a/an”.\r\nVD:    The music, the equipment, the information, etc.\r\n\r\nSome rice, some milk, some tea, some sugar, etc.\r\n\r\nAny soup, any salt, any peace, any knowledge, etc.\r\n\r\nMuch money, much enjoyment, much wind, etc.\r\n\r\n*CHÚ Ý: Một số danh từ không đếm được có kết thúc bằng –s, nhưng không phải là danh từ đếm được số nhiều.\r\n\r\nVD: News, measles, mathematics, physics, có “s” nhưng không phải là danh từ đếm được số nhiều.\r\n• Nhiều danh từ vừa là danh từ đếm được lại vừa là danh từ không đếm được. Thường thì về ý nghĩa chúng có sự khác nhau.\r\n\r\nChúng ta cùng xét các trường hợp cụ thể:\r\n\r\n \r\n\r\nDANH TỪ	DANH TỪ ĐẾM ĐƯỢC	DANH TỪ KHÔNG ĐẾM ĐƯỢC\r\nChicken\r\n \r\n\r\nCon gà\r\nVD: There are two chickens in the cop.\r\n\r\nThịt gà\r\nVD: We have got some chicken for dinner.\r\n\r\nExperience\r\n \r\n\r\nCác hoạt động trải nghiệm\r\nVD: We gained a lot of exciting experiences after the summer camp.\r\n\r\nKinh nghiệm\r\nVD: This job requires previous experience in marketing.\r\n\r\nHair\r\n \r\n\r\nMột sợi tóc\r\nVD: Look! There is a hair in my soup.\r\n\r\nMái tóc\r\nVD: She has long black hair.\r\n\r\nLight\r\n \r\n\r\nBóng đèn\r\nVD: I’ve just bought a new light.\r\n\r\nÁnh sáng nói chung\r\nVD: There is too much light here.\r\n\r\nNoise\r\n \r\n\r\nMột tiếng ồn cụ thể\r\nVD: I heard a loud noise yesterday.\r\n\r\nSự ồn ào nói chung\r\nVD: They made noise all night.\r\n\r\nPainting\r\n \r\n\r\nBức vẽ\r\nVD: The paintings by Picasso worths a lot of money.\r\n\r\nViệc vẽ vời nói chung\r\nVD: Painting is my passion.\r\n\r\nPaper\r\n \r\n\r\nTờ báo\r\nVD: I bought two papers this morning.\r\n\r\nGiấy viết\r\nVD: He asked me for paper but I didn’t have any.\r\n\r\nRoom\r\n \r\n\r\nCăn phòng\r\nVD: There is 5 rooms in my house.\r\n\r\nChỗ trống\r\nVD: I cut down some trees to make room for a garden.\r\n\r\nSport\r\n \r\n\r\nMôn thể thao\r\nVD: Tennis is a competitive sport.\r\n\r\nThể thao (nói chung)\r\nVD: He is crazy about sport.\r\n\r\nTime\r\n \r\n\r\nSố lần\r\nVD: I’ve been to Hanoi many times.\r\n\r\nThời gian\r\nVD: Time is money.\r\n\r\nWork\r\n \r\n\r\nTác phẩm\r\nVD: It is such a brilliant work.\r\n\r\nCông việc\r\nVD: We met each other at work.', 'III. CÁCH DÙNG LƯỢNG TỪ VỚI DANH TỪ ĐẾM ĐƯỢC VÀ KHÔNG ĐẾM ĐƯỢC\r\n\r\n \r\n\r\nKhi nói về cách sử dụng danh từ không đếm được và danh từ đếm được, chúng ta chú ý tới các mạo từ và lượng từ đi kèm.  Một số mạo từ và lượng từ có thể đi cùng thể dùng với cả 2 loại danh từ trên nhưng một số khác chỉ có thể đi kèm với danh từ đếm được hoặc danh từ không đếm được\r\nBảng dưới đây phân chia các mạo từ và lượng từ khi được đặt trước danh từ đếm được và không đếm được.\r\n\r\n \r\n\r\n+ DANH TỪ ĐẾM ĐƯỢC	+ CẢ 2	+ DANH TỪ KHÔNG ĐẾM ĐƯỢC\r\nA/an\r\nMany\r\n\r\nFew\r\n\r\nA few\r\n\r\nA couple of\r\n\r\nSome\r\nAny\r\n\r\nA lot of/lots of\r\n\r\nPlenty of\r\n\r\nMuch\r\nLittle\r\n\r\nA little\r\n\r\nA great deal of\r\n\r\nA large amount of\r\n\r\n \r\n\r\n \r\n\r\nCÁC DANH TỪ CHỈ TẬP HỢP THƯỜNG GẶP\r\nA bar of chocolate: một thanh sô cô la\r\nA bouquet of flower: 1 bó hoa\r\nA bunch of bananas/flowers /grapes /keys: một nải chuối/bó hoa/ chùm nho, chùm chìa khóa\r\nA bundle of vegetables/ firewood/papers: một bó rau/bó củi/bọc giấy\r\nA fall of snow/rain: một trận tuyết/mưa rơi\r\nA flight of birds: một đàn chim\r\nA flock of geese/sheep/ goats/ birds: một đàn ngỗng/cừu/dê/chim\r\nA glass of water: một cốc nước\r\nA litter of puppies: một lứa chó con\r\nA nest of ants: một tổ kiến\r\nA pack of wolves/ hounds/ grouse/fools: bầy chó sói/chó săn/đàn gà rô trắng/một lũ ngốc\r\nA school/shoal of fish: một đàn cá\r\nA shower of rain: một cơn mưa rào\r\nA stack of wood: một đống gỗ\r\nA swarm of flies / bees: một đàn/bầy ruồi/ong', 'tb2'),
('E4', 'ENGLISH', 'Dưới đây là bảng tóm tắt phân biệt A/ An và The:\r\n\r\n \r\n\r\nA/ AN	THE\r\n–         Vị trí: trước N số ít\r\n–         Nghĩa: một…\r\n\r\n–         Dùng trước N chưa xác định\r\n\r\n–         Chỉ dùng với N đếm được số ít\r\n\r\n–         A/ an + địa danh nhỏ\r\n\r\n \r\n\r\n–         Vị trí: trước N số ít hoặc số nhiều\r\n–         Nghĩa: cái đó…\r\n\r\n–         Dùng trước N đã xác định\r\n\r\n–         Dùng với cả N đếm được và không đếm được\r\n\r\n–         The + địa danh lớn, nổi tiếng\r\n\r\n \r\n\r\nI/ MẠO TỪ\r\n\r\n \r\n\r\nMạo từlà từ dùng trước danh từ và cho biết danh từ ấy đề cập đến một đối tượng xác định hay không xác định.\r\nMạo từ không phải là một loại từ riêng biệt, chúng ta có thể xem nó như một bộ phận của tính từ dùng để bổ nghĩa cho danh từ – chỉ đơn vị (cái, con chiếc).\r\nMạo từ trong tiếng anh chỉ có 2 loại, được hiểu như sau:\r\n \r\n\r\nMạo từ bất định (Indefinite article): a, an\r\nVD:    A (pet/ bike/ fan/ tree/ …)\r\n\r\nAn (apple/ orange/ elephant/ igloo/…)\r\n\r\n \r\n\r\nMạo từ xác định (Denfinite article): the\r\nVD: The (house/ capital/ sky/ eggs/ table/…)', 'II/ MẠO TỪ BẤT ĐỊNH “A/AN”\r\n\r\nNghĩa: một…\r\nTa dùng mạo từ bất định “a/ an” với danh từ đếm được số ít.\r\nAN + NGUYÊN ÂM (a, e, i, o,u)\r\nVD: An apple, an iguana, an eel, an egg, etc.\r\n\r\n \r\n\r\n*CHÚ Ý 1:\r\nNguyên âm được xét theo cách phát âm của từ đó, chứ không chỉ mặt chữ, tức là, ta vẫn dùng AN với các từ viết tắt bắt đầu là F, H, M, L, N, R, S \r\n\r\n \r\n\r\nVD: an HTC, an MP, an MC, an LG, etc.\r\n\r\n \r\n\r\n*CHÚ Ý 2: AN + các từ bắt đầu bằng âm “h” câm: honor, honest, heir, herbal…\r\n \r\n\r\nVD: He is an honest person\r\n\r\n2.A + phụ âm (còn lại)\r\n\r\nVD: A bus, a phone, a shirt, a snake, a match, etc.\r\n\r\n \r\n\r\n*CHÚ Ý 3:\r\nAn + từ bắt đầu bằng “U” nhưng phát âm là /ʌ/\r\n\r\nVD: an umbrella /ʌmˈbrel.ə/\r\n\r\nA + từ bắt đầu bằng “U” nhưng phát âm là /ju/\r\n\r\nVD: a uniform /ˈjuː.nɪ.fɔːm/, a unique style /ju:´ni:k/\r\n\r\n \r\n\r\nNgười nói đề cập đến một đối tượng số ít, được nhắc tới lần đầu tiên (đối tượng chưa xác định).\r\nVD:    I live in a house near a shop.\r\n\r\nHe has two children: a son and a daughter.\r\n\r\nShe bought an apple and an orange.\r\n\r\nCÁCH DÙNG:\r\na, A/ AN + N chỉ nghề nghiệp:\r\n\r\nVD:    I’m a student.\r\n\r\nMy brother is an architect.\r\n\r\nb, Trong các cụm từ/ từ chỉ lượng:\r\n\r\nVD: a pair of/ a little/ a few/ a thousand…\r\n\r\nc, Dùng trong câu cảm thán:\r\n\r\nCẤU TRÚC:\r\nWhat a/ an + Adj + N!\r\n\r\n= How + Adj + the N + be! (Thật là …làm sao!)\r\n\r\n \r\n\r\nVD:    What a beautiful flower! = How beautiful the flower is!\r\n\r\nWhat a great party! = How great the party was!\r\n\r\n \r\n\r\nd, Dùng trong câu hỏi nhãn hiệu\r\n\r\n \r\n\r\nCẤU TRÚC:\r\n–         What MAKE + be + S? (Cái này của hang nào thế?)\r\n\r\n–         It’s A/AN + nhãn hiệu. (À cái này của hãng…)\r\n\r\n \r\n\r\nVD:     – What make is this television?\r\n\r\n– It’s an LG.\r\n\r\n– It’s a SONY.\r\n\r\ne, Dùng trong cấu trúc liệt kê\r\n\r\n \r\n\r\nCẤU TRÚC: There is/ was + a/ an + N\r\nCHÚ Ý: Luôn dùng “There is…” cho dù có liệt kê bao nhiêu thứ.\r\n\r\n \r\n\r\nVD: There is a table, a picture, a computer and a lamp in my bedroom.', 'III/ MẠO TỪ XÁC ĐỊNH “THE”\r\n\r\nNghĩa: cái đó…\r\nChúng ta dùng mạo từ xác định “the” với danh từ chỉ đối tượng đếm được hoặc không đếm được, số ít hoặc số nhiều.\r\nVD:\r\n\r\nThe + danh từ đếm được số ít: the building, the train, the goat, the teacher, etc.\r\n\r\nThe + danh từ đếm được số nhiều: the houses, the cats, the cars, the doctors, etc.\r\n\r\n\r\n \r\nThe + danh từ không đếm được: the rice, the information, the work, etc.\r\n\r\n \r\n\r\nDùng khi cả người nói lẫn người nghe đều biết rõ đối tượng đó (đối tượng đã xác định).\r\nCÁCH DÙNG\r\na, THE + sự vật, sự việc kể đến lần thứ hai\r\n\r\nVD:    I live in a house. The house is very nice.\r\n\r\nShe has two children: a son and a daughter. The son is chubby. The daughter is very small.\r\n\r\nb, THE chỉ các yếu tố duy nhất:\r\n\r\nVD: the sun, the moon, the earth, the sea…\r\n\r\nc, THE + các cấu trúc so sánh\r\n\r\nCẤU TRÚC:\r\n•       So sánh nhất: THE + ADJ-est/ MOST ADJ\r\n\r\nVD:\r\n\r\nThe + adj-est: the longest, the biggest, the slowest, etc.\r\n\r\nThe + most adj: the most brilliant, the most well-known, etc.\r\n\r\n•       So sánh trong số 2: Of the two/ pair/…, THE + ADJ-er/ MORE ADJ\r\n\r\nVD:\r\n\r\nVới tính từ ngắn: Of the twins, the elder is the taller.\r\n\r\nVới tính từ dài: Of the twins, the younger is more handsome.\r\n\r\n•       So sánh kép đồng tiến: THE + ADJ-er/ MORE ADJ…, THE + ADJ-er/ MORE ADJ…\r\n\r\nVD:\r\n\r\nVới tính từ ngắn: The older I get, the happier I become.\r\n\r\nVới tình từ dài: The more I know about him, the more admiring I get.\r\n\r\n \r\n\r\ne, THE đi với Adj để tạo thành N:\r\n\r\nCẤU TRÚC: THE + ADJ = N\r\n \r\n\r\nVD:    The rich = rich people: những người giàu\r\n\r\nThe poor = poor people: những người nghèo\r\n\r\nThe young = young people: những người trẻ tuổi\r\n\r\nf, THE + số thứ tự\r\n\r\nVD:    the first, the second, the third, etc.\r\n\r\nThe fifth time: lần thứ 5\r\n\r\nThe 23th of October: ngày 23/10\r\n\r\ng, THE + từ chỉ biển, sông, khách sạn, quán bar, tên ban nhạc, tên các dãy núi\r\n\r\nVD: The Nile, the Huong Giang hotel, the Mekong river, the Himalaya, the westlife, the Backstreetboy….\r\n\r\nh, Chỉ quốc tịch:\r\n\r\nVD: The Vietnamese, the Chinese, the Japanese, the American, etc.\r\n\r\ni, Trước tên của tập hợp nhiều bang, nhiều nước:\r\n\r\nVD: The Philippines, the United Nations, the United States, etc.\r\n\r\nk, THE + tên loài vật số ít chỉ toàn thể loài ấy\r\n\r\nCẤU TRÚC: THE + N (động vật) số ít = N (động vật) số nhiều\r\n \r\n\r\nVD: The tiger = tigers: loài hổ\r\n\r\nWe are finding ways to protect the rhinos (rhinos) from extinction.\r\n\r\nl, THE + N + mệnh đề quan hệ\r\n\r\nCẤU TRÚC: THE + N + WHO/ WHICH/ THAT/ WHEN/ WHERE/… + S + V\r\n \r\n\r\nVD: The person who I love most is my mother.\r\n\r\nm, THE + N + in + N\r\n\r\nCẤU TRÚC: THE + N + in + trang phục\r\n \r\n\r\nVD: The girl in blue dress is my sister.\r\n\r\nIV/ CÁC TRƯỜNG HỢP KHÔNG DÙNG MẠO TỪ\r\n\r\nTrước danh từ đếm được số nhiều, và danh từ không đếm được nói chung\r\nVD:\r\n\r\nVới danh từ đếm được số nhiều: Books are good friends.\r\n\r\nVới danh từ không đếm được: Milk is good for you.\r\n\r\nTrước một số danh từ chỉ tên nước, đường phố, thị xã, ngôn ngữ, sân bay, nhà ga, bữa ăn, núi\r\nVD:    England is a large country.\r\n\r\nI live in hanoi.\r\n\r\nMy house is in Quang Trung street.\r\n\r\nThey live near Noi Bai airport.\r\n\r\nEverest is the highest mountain in the world.', 'TRƯỜNG HỢP ĐẶC BIỆT\r\nTrước một số địa điểm công cộng như trường học, nhà thờ, nhà tù,…\r\n\r\no   Ta không dùng mạo từ khi đến đó với đúng mục đích sử dụng\r\n\r\no   Dùng mạo từ “the” khi ta đến đó với mục đích khác\r\n\r\nVD:    At/in/ to (the) school/university/college\r\n\r\nI go to school: Tôi đến trường (để học).\r\n\r\nI go to the school to attend the parents meeting: Tôi đến trường (để họp phụ huynh).\r\n\r\nIn (the) church\r\n\r\nWe pray in church every Sundays: Chúng tôi đi cầu kinh mỗi Chủ nhật. (đến nhà thờ cầu nguyện)\r\n\r\nWe planned to meet in the church: Tôi đi đến nhà thờ (để chơi hoặc gặp mặt ai đó).\r\n\r\nIn (the) prison\r\n\r\nHe is in prison now: Hắn đang bị nhốt trong tù (ở tù vì phạm tội).\r\n\r\nShe went to the prison to see if he was fine: Cô ấy đến tù thăm xem hắn có ổn không (đến tù thăm tù nhân).', 'nc'),
('JS2', 'JAVASCRIPT', '1, Hằng trong javascript.\r\n\r\n \r\n-Để khai báo hằng trong javascript chúng ta sử dụng cú pháp:\r\n\r\nconst tenHang = giatri;\r\nTrong đó:\r\n\r\ntenHang: Là tên của hằng các bạn muốn đặt.\r\ngiatri: Là giá trị của hằng, có thể là số,chuỗi,mảng,object.\r\nChú ý: Tên Hằng phải được đặt theo quy tắc sau đây\r\n\r\nTên hằng bắt đầu phải là chữ cái hoặc ký tự \r\nTên hằng không được bắt đầu bằng số.\r\nTên hằng có độ dài không giới hạn.\r\nVD:\r\n\r\n    const MyConst = 4; // đúng\r\n	const _MyConst = 4; // đúng\r\n	const __MyConst = 4; // đúng\r\n	const MyConst1 = 4; // đúng\r\n	const _MyConst1 = 4; // đúng\r\n	const __MyConst1 = 4; // đúng\r\n	const 90MyConst1 = 4; // sai\r\n	const -MyConst1 = 4; // sai\r\n2, Biến trong javascript.\r\n\r\n \r\n-Trong javascript chúng ta có thể khai báo biến bằng các cách sau đây:\r\n\r\nCách 1: Sử dụng từ khóa var.\r\n\r\nvar tenBien = giaTri;\r\nCách 2: Không cần sử dụng từ khóa.\r\n\r\ntenBien = giaTri\r\nTrong đó:\r\n\r\ntenBien: Là tên của biến các bạn muốn đặt.\r\ngiaTri: Là giá trị của biến, có thể là số,chuỗi,mảng,object.\r\nChú ý: Tên Biến phải được đặt theo quy tắc sau đây\r\n\r\nTên biến bắt đầu phải là chữ cái hoặc ký tự \r\nTên biến không được bắt đầu bằng số.\r\nTên biến có độ dài không giới hạn.\r\nVD:\r\n\r\n	var MyVariable = 4; // đúng\r\n	var _MyVariable = 4; // đúng\r\n	var __MyVariable = 4; // đúng\r\n	var MyVariable1 = 4; // đúng\r\n	var _MyVariable1 = 4; // đúng\r\n	var __MyVariable1 = 4; // đúng\r\n	var 90MyVariable1 = 4; // sai\r\n	var -MyVariable1 = 4; // sai\r\n3, Kiểu dữ liệu trong Javascript.\r\n -Cũng giống như trong PHP biến và hằng trong javascript cũng tự detect kiểu dữ liệu của biến và hằng.\r\n\r\nVD:\r\n\r\nvar a = 5; //dữ liệu kiểu int\r\nvar a = 5.65; //dữ liệu kiểu float\r\nvar a = Toidicode; //dữ liệu kiểu string\r\nvar a = [1, 2, 3, 5, 9]; //dữ liệu kiểu array\r\nvar a = new Array(1, 2, 3, 5, 9); //dữ liệu kiểu array\r\nvar a = {\'b\': 4, \'c\': 5}; //dữ liệu kiểu object\r\n4, Hiển thị nội dung ra trình duyệt.\r\n-Trong javascript bạn có thể hiển thị nội dung ra trình duyệt bằng rất nhiều cách, nhưng trong phần này mình sẽ chỉ hướng dẫn mọi người 2 cách thông dụng nhất để các bạn có thể kiểm tra được dữ liệu.\r\n\r\nCách 1: dùng document.write() hoặc document.writeln().\r\n\r\nvar a = \'toidicode.com\';\r\ndocument.write(a);\r\nXem Kết Quả\r\n\r\nChú ý: Cách này không thể in ra được thông tin của object.\r\n\r\nCách 2: dùng console.log().\r\n\r\n    var a = \'toidicode.com\';\r\n	console.log(a);\r\nXem Kết Quả\r\n\r\n-Cách này có thể xuất được nội dung của tất cả các dạng dữ liệu và để xem được hiển thị của nó thì các bạn cần phải bật cửa sổ console của trình duyệt (thường ấn f12).\r\n\r\n5, Lời kết.\r\n-Qua phần này mình đã giới thiệu với mọi người về hằng và biến trong javascript, tuy nó rất là basic nhưng mọi người cũng nên chú ý vì sau này phải sử dụng nó rất là nhiều đấy.', '1, Toán tử.\r\n\r\n \r\nToán tử gán.\r\n-Toán tử gán thực ra là các bạn đã dùng qua ở bài trước rồi nhưng các bạn chưa biết tên gọi của nó thôi. Trong Javascript để gán giá trị cho biến hoặc hằng,.. chúng ta sử dụng dấu =\r\n\r\nCú pháp:\r\n\r\nvar bien = giatri;\r\nVD:\r\n\r\nvar a = 1996\r\nChạy Code\r\nToán tử số học\r\n-Toán tử số học thực ra là các dạng tính toán như cộng, trừ, nhân, chia ,... mà các bạn đã được học từ bé và đây là danh sách các toán tử số học trong javascript hỗ trợ.\r\n\r\nCộng\r\n-Phép cộng sẽ cộng 2 con số lại nếu nó là số, và sẽ nối chuỗi lại nếu là chuỗi.\r\n\r\nVD:\r\n\r\nvar a = 6;\r\nvar b = 5;\r\nvar c = \'vu thanh \';\r\nvar d =\'tai\';\r\ndocument.write(a + b); // 11\r\ndocument.write(\'<br/>\'); // xuống dòng cho dễ đọc\r\ndocument.write(c + d); // vu thanh tai\r\nChạy Code\r\nTrừ\r\n-Phép trừ chỉ dùng được với số\r\n\r\nVD:\r\n\r\nvar a = 6;\r\nvar b = 5;\r\ndocument.write(a - b); // 1\r\nChạy Code\r\nNhân\r\n-Phép nhân cũng chỉ dùng được với số.\r\n\r\nVD:\r\n\r\nvar a = 6;\r\nvar b = 5;\r\ndocument.write(a * b); // 30\r\nChạy Code\r\nChia\r\n-Phép chia dùng được với số.\r\n\r\nVD:\r\n\r\nvar a = 10;\r\nvar b = 5;\r\ndocument.write(a / b); // 2\r\nChạy Code\r\nChia lấy dư\r\n-Phép chia này sẽ lấy phần dư của phép chia\r\n\r\nVD:\r\n\r\nvar a = 6;\r\nvar b = 5;\r\ndocument.write(a % b); // 1\r\nXem Kết Quả\r\n\r\n2, Toán Tử Kết Hợp\r\n\r\n \r\n-Toán tử kết hợp  thực ra là một cách rút gọn của các toán tử số học.\r\n\r\n#	Ví dụ	Chú thích\r\n++	a++	Bằng a = a+1;\r\n--	a--	Bằng a = a-1;\r\n*=	a*=b	Bằng a = a*b;\r\n/=	a/=b	Bằng a = a/b;\r\n+=	a+=b	Bằng a = a+b;\r\n-=	a-=b	Bằng a = a-b;\r\n%=	a%=b	Bằng a = a%/b;\r\n3,Toán Tử Quan Hệ\r\n-Đây là một dạng toán tử sẽ phải sử dụng rất nhiều trong khi lập trình, mà theo như bên toán học thì đây là toán so sánh. Kết quả trả về của toán tử này sẽ là kiểu boolean (TRUE FALSE).\r\n\r\nToán tử	Chú Thích\r\n>	Lớn hơn\r\n>=	Lớn hơn hoặc bằng\r\n<	Nhỏ hơn\r\n<=	Nhở hơn hoặc bằng\r\n==	Bằng \r\n!=	Khác (Không bằng)\r\n-Chú ý: Các toán tử có từ 2 ký tự trở lên như <=,>= phải viết liền không được chứa khoảng trắng ở giữa.\r\n\r\n4, Toán tử logic.\r\n-Đây là một dạng toán tử kết hợp giữa hai hoặc nhiều giá trị boolean hay nói cách khác là kết hợp của hai hay nhiều toán tử quan hệ lại và nó cũng trả về dữ liệu dạng True False.\r\n\r\nBảng Logic\r\n\r\n#	Chú Thích	Ví Dụ	Kết Qủa\r\n &&	 Trả về true nếu cả hai vế là true	True&&True	True\r\n ||	Trả về true nếu một trong hai vế là true	True||False	True\r\n!	Trả về true nếu phủ định của nó là true	!False	True\r\n 5, Lời kết.\r\n-Phần hôm nay chúng ta dùng ở đây thôi, các bạn cố gắng ôn tập nhiều về phần này nhé, Bài tiếp theo chúng ta sẽ tìm hiểu về câu lệnh rẽ nhánh trong javascript.', '1, Câu lệnh if.\r\n\r\n \r\nIf\r\nCú Pháp:\r\n\r\nif (condition) {\r\n	//nếu điều kiện đúng thì thực hiện\r\n}\r\nTrong đó: condition là một hoặc nhiều mệnh đề điều kiện có giá trị trả về TRUE/FALSE.\r\n\r\nVD:\r\n\r\nvar a = 5;\r\nvar b = 6;\r\nif (a != b) {\r\n	//Vì a khác b nên code phía trong if sẽ được chạy\r\n	document.write(\'a khác b\');\r\n}\r\nXem Kết Quả\r\n\r\nCâu lệnh else.\r\n-Như ở phía trên mình có nói câu lệnh if thực hiện khi mệnh đề đi kèm nó đúng, và mệnh đề else sẽ thực hiện khi điều kiện của mệnh đề if không thỏa mãn.\r\n\r\nCú Pháp:\r\n\r\nif (true) {\r\n	// nếu đúng thì chạy code trong này\r\n} else {\r\n	//nếu sai thì chạy code trong này\r\n}\r\nVD:\r\n\r\nvar a = 5;\r\nvar b = 5;\r\nif (a != b) {\r\n	document.write(\'a khác b\');\r\n}\r\nelse{\r\n	//Vì a bằng b nên code phía trong else sẽ được chạy\r\n	document.write(\'a bằng b\');\r\n}\r\nXem Kết Quả\r\n\r\nKết hợp else if.\r\n-Có đôi khi bạn muốn xử lý đa nhánh như làm bài toán phân loại học lực thì lúc này bạn lên dùng else if để xử lý các điều kiện khác với if.\r\n\r\nVD:\r\n\r\nvar diem = 5;\r\n\r\nif (diem < 4) {\r\n    document.write(\'Học Lại\');\r\n} else if (diem >= 4 && diem < 5.5) {\r\n    document.write(\' Loại D\');\r\n} else if (diem >= 5.5 && diem < 7) {\r\n    document.write(\'Loai C\');\r\n} else if (diem >= 7 && diem < 8.5) {\r\n    document.write(\'Loại B\');\r\n} else if (diem >= 8.5 && diem <= 10) {\r\n    document.write(\'Loai A\');\r\n} else {\r\n    document.write(\'Điểm không hợp lệ\');\r\n}\r\nXem Kết Quả\r\n\r\nif-else lồng nhau.\r\n-Cũng giống như bài toán ở phần 3 thì chúng ta có thể sử dụng if-else lồng nhau được.\r\n\r\nVD:\r\n\r\nvar diem = 5;\r\n\r\nif (diem < 4) {\r\n    document.write(\'Học Lại\');\r\n} else {\r\n    if (diem >= 4 && diem < 5.5) {\r\n        document.write(\' Loại D\');\r\n    } else {\r\n        if (diem >= 5.5 && diem < 7) {\r\n            document.write(\'Loai C\');\r\n        } else {\r\n            if (diem >= 7 && diem < 8.5) {\r\n                document.write(\'Loại B\');\r\n            } else {\r\n                if (diem >= 8.5 && diem <= 10) {\r\n                    document.write(\'Loai A\');\r\n                } else {\r\n                    document.write(\'Điểm không hợp lệ\');\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nXem Kết Quả\r\n\r\nif-else rút gọn.\r\n-Chúng ta cũng có thể rút gọn câu lệnh if-else với cú pháp như sau:\r\n\r\n(dieukien) ? (đúng) : (sai)\r\nTrong đó: Điều kiện là các biểu thức, mệnh đề trả về giá trị true false.\r\n\r\nVD:\r\n\r\nvar diem = 5;\r\ndiem == 5 ? document.write(\'Điểm Bằng 5\') : document.write(\'Diểm khác 5\');\r\nXem Kết Quả\r\n\r\n2, Switch case.\r\n\r\n \r\n-Đây là một loại câu lệnh rẽ nhánh( hay còn gọi là câu lệnh điều kiện) có đặc điểm là để giải quyết các bài toán mà có các nhánh là các điều kiện cố định.\r\n\r\nCú Pháp:\r\n\r\nswitch (condition) {\r\n    case value1:\r\n        //code\r\n        break;\r\n    case value2:\r\n        //code\r\n        break;\r\n    default:\r\n        //code\r\n        break;\r\n}\r\nTrong đó:\r\n\r\ncondition là biến muốn kiểm tra để dẽ nhánh.\r\nvalue1,value2,.. là các giá trị tương ứng của condition mà các bạn muốn rẽ nhánh.\r\ndefault là giá trị khác đối với tất cả các value trên(giống với else).\r\nbreak (xem chi tiết)\r\nVD: Đọc số trong phạm vi từ 0 đến 5.\r\n\r\nvar so = 5;\r\n\r\nswitch (so) {\r\n    case 0:\r\n        document.write(\'không\');\r\n        break;\r\n    case 1:\r\n        document.write(\'Một\');\r\n        break;\r\n    case 2:\r\n        document.write(\'Hai\');\r\n        break;\r\n    case 3:\r\n        document.write(\'Ba\');\r\n        break;\r\n    case 4:\r\n        document.write(\'Bốn\');\r\n        break;\r\n    case 5:\r\n        document.write(\'Năm\');\r\n        break;\r\n    default:\r\n        document.write(\'Không thỏa mãn\');\r\n        break;\r\n}\r\n Xem Kết Quả\r\n\r\n3, Lời kết.\r\n-Như vậy qua phần này mình đã giới thiệu với mọi người về if-else, các dạng và cách sử dụng của nó rồi, bài tiếp theo chúng ta sẽ tìm hiểu về vòng lặp trong Javascript xem có gì không nhé.', '1, Vòng lặp là gì.\r\n\r\n \r\n-Vòng lặp là một chuỗi sự kiện, hành động được lặp đi lặp lại theo một nguyên tắc nhất định. Ví dụ như vong lặp của con người: sinh-lão-bệnh-tử.\r\n\r\n-Và đối với Javascript nó hỗ trợ chúng ta 3 kiểu vòng lặp(loop) là for, forEach(cái này mình sẽ nói sau) while và do-while.\r\n\r\n2, Vòng lặp for.\r\n\r\n \r\n-Vòng lặp for trong javascript hoạt động cũng giống như các ngôn ngữ khác.\r\n\r\nCú Pháp:\r\n\r\nfor (bienkhoitao; dieukienthucthi ; buocnhay) { \r\n	# code...\r\n}\r\nTrong đó:\r\n\r\nbienkhoitao: là giá trị khởi tạo ban đầu của vòng lặp.\r\ndieukienthucthi: là điều kiện mà vòng lặp được phép chạy(chú ý: Nếu bạn muốn lặp vô tận thì có thể bỏ trống).\r\nbuocnhay: là khoảng đệm nhảy của mỗi vòng lặp.\r\nVD:\r\n\r\nfor (var i = 1; i <= 10; i++) {\r\n    document.write(\'Dòng số: \' + i + \'<br/>\');\r\n}\r\n Xem Kết Quả\r\n\r\nVòng lặp for vô tận\r\n-Để có thể làm vòng lặp for trở thành vòng lặp vô tận thì bạn chỉ cần để trống biểu thức điều kiện thứ 2 trong vòng lặp for.\r\n\r\nVD:\r\n\r\nfor (var i = 0; ; i++) {\r\n    //code\r\n}\r\n3, Vòng lặp do-while.\r\n-Đây là một dạng vòng lặp cũng khá phổ biến trong javascript, đặc trưng của vòng lặp này là để lặp các dữ liệu mà không xác đinh được điều kiện dừng chính xác hoặc điều kiện dừng phức tạp và nó thực thi câu lệnh trước rồi mới kiểm tra điều kiện.\r\n\r\nCú Pháp:\r\n\r\ndo {\r\n    // code\r\n} while (condition);\r\n Trong đó: condition là điều kiện để dừng vòng lặp, nếu bằng false thì vòng lặp sẽ dừng và ngược lại true vòng lặp sẽ chạy tiếp.\r\n\r\nVD: Phía trên mình có nói là vòng lặp do-while thực thi câu lệnh trước rồi mới kiểm tra. và đây là ví dụ chứng minh cho câu nói đó.\r\n\r\ndo {\r\n	document.write(1);\r\n} while(false);\r\n Xem Kết Quả\r\n\r\nVD: Thực hiện in ra các số từ 1 đến 10 bằng vòng lặp do-while.\r\n\r\n//khởi tạo biến i bằng 1\r\nvar i = 1;\r\ndo {\r\n    //in ra i hiện tại\r\n	document.write(i+ \'<br>\');\r\n    //tiến hành cộng i thêm 1 đơn vị\r\n	i++;\r\n//xét điều kiện i>10 thì sẽ dừng \r\n} while(i <= 10);\r\nXem Kết Quả\r\n\r\n4, Vòng lặp while.\r\n-Vòng lặp while cũng giống như vòng lặp do-while là dùng để lặp các dữ liệu không biết chính xác điều kiện dừng hoặc điều kiện dừng phức tạp. Và vòng lặp while khác với vòng lặp do-while là nó sẽ tiến hành kiểm tra điều kiện xong rồi mới tiến hành lặp.\r\n\r\nCú Pháp:\r\n\r\nwhile (condition) {\r\n		//code\r\n	}\r\nTrong đó: condition là điều kiện để dừng vòng lặp, nếu bằng false thì vòng lặp sẽ dừng và ngược lại true vòng lặp sẽ chạy tiếp.\r\n\r\nVD: Thực hiện in ra các số từ 1 đến 10 bằng vòng lặp while.\r\n\r\n//khởi tạo biến i=1\r\nvar i = 1;\r\n//xác định điều kiện i>10 thì sẽ dừng vòng lặp\r\nwhile(i <= 10){\r\n	document.write(i);\r\n	//tiến hành tăng i thêm 1 đơn vị\r\n	i++;\r\n}\r\nXem Kết Quả\r\n\r\n5, Vòng lặp lồng nhau.\r\n-Cũng giống như câu lệnh điều kiện thì voàng lặp cũng hoàn toàn có thể lồng nhau.\r\n\r\nVD: Vòng lặp for lồng nhau.\r\n\r\nfor(i = 0; i <= 10; i++) {\r\n	for(j = i ; j <= 10; j++) {\r\n		document.write(\'*\');\r\n	}\r\n	document.write(\'<br>\');\r\n}\r\nXem Kết Quả\r\n\r\nVD: Vòng lặp do-while lồng nhau.\r\n\r\nvar i = 0;\r\ndo {\r\n    var j = i;\r\n    do {\r\n        document.write(\'*\');\r\n        j++;\r\n    } while (j <= 10);\r\n    document.write(\'<br>\');\r\n    i++;\r\n} while (i <= 10);\r\nXem Kết Quả\r\n\r\nVD: Vòng lặp while lồng nhau.\r\n\r\nvar i = 0;\r\nwhile (i <= 10) {\r\n    var j = i;\r\n    while (j <= 10) {\r\n        document.write(\'*\');\r\n        j++;\r\n    }\r\n    document.write(\'<br>\');\r\n    i++;\r\n}\r\nXem Kết Quả\r\n\r\n6, Lời kết.\r\n-Như vậy phần trên mình đã giới thiệu với mọi người về vòng lặp trong javascript rồi, bài tiếp theo chúng ta sẽ đi tìm hiểu về hàm trong javascript.', 'tb1');
INSERT INTO `document` (`MaMH`, `TenMH`, `Phan1`, `Phan2`, `Phan3`, `Phan4`, `MaLevel`) VALUES
('JS3', 'JAVASCRIPT', '1, Break.\r\n\r\n \r\n-Lệnh break trong javascript sẽ có tác dụng dừng vòng lặp trong chương trình.\r\n\r\nVD: Dùng break để dừng vòng lặp.\r\n\r\n//khởi tạo vòng lặp chạy từ 0 đến 10\r\nfor (var i = 0; i <= 10; i++) {\r\n    //in ra i hiện tại\r\n    document.write(i);\r\n    //nếu i = 5 thì dừng vòng lặp\r\n    if (i == 5) {\r\n        break;\r\n    }\r\n}\r\nXem Kết Quả\r\n\r\n2, Continue.\r\n\r\n \r\n-Continue trong javascript có tác dụng bỏ qua các dòng lệnh phía sau nó và nhảy qua tiến trình lặp tiếp theo.\r\n\r\n//khởi tạo vòng lặp chạy từ 0 đến 10\r\nfor (var i = 0; i <= 10; i++) {\r\n    //nếu i = 5 thì bỏ qua vòng lặp\r\n    if (i == 5) {\r\n        continue;\r\n    }\r\n    //in ra i hiện tại\r\n    document.write(i + \'<br>\');\r\n}\r\nXem Kết Quả\r\n\r\n-Các bạn xem kết quả và cảm nhận nhé!\r\n\r\n3, Lời Kết.\r\n-Sau phần này mình hi vọng các bạn sẽ hiểu thêm về lệnh break,continue trong javascript. Bài tiếp theo chúng ta sẽ tìm hiểu về hàm trong javascript.', '1, Hàm là gì?\r\n\r\n \r\n-Hàm là một hoặc nhiều đoạn mã được viết ra để thực thi một hoặc nhiều hành động khi gọi nó, hàm có khả năng gọi đi gọi lại được. VD như thay vì tính tích của 2 số nhất định chúng ta có thể sử dụng hàm để tính tích của 2 số bất kỳ mà chúng ta muốn.\r\n\r\n2, Cấu trúc của hàm.\r\n\r\n \r\n-Hàm trong javascript khai báo cũng giống như trong javascript, là bắt đầu phải có từ khóa function với các dạng như sau:\r\n\r\nHàm cơ bản\r\n-Đây là dạng cơ bản nhất của hàm trong javascript, có cú pháp như sau:\r\n\r\nfunction funName() {\r\n	//code\r\n}\r\nTrong đó: funName là tên của hàm mà các bạn muốn đặt còn function là từ khóa bắt buộc.\r\n\r\nVD: Tạo hàm lấy tên website.\r\n\r\nfunction getWebsite() {\r\n    document.write(\'http://toidicode.com\');\r\n}\r\nHàm có tham số truyền vào\r\n-Đây là một dạng hàm rất hay được sử dụng trong dự án.\r\n\r\nCú pháp:\r\n\r\nfunction funName(param_1, ..., pram_n) {\r\n	//code\r\n}\r\nTrong đó:\r\n\r\nfunName là tên của hàm các bạn muốn đặt.\r\nparam_1,...,pram_n là các tham số mà các bạn muốn truyền vào hàm(không giới hạn số lượng).\r\nVD: Tạo hàm tính tổng của 2 số bất kì.\r\n\r\nfunction getSum(a, b) {\r\n	document.write(\'Tổng: \' + (a + b));\r\n}\r\nHàm có tham số mặc định\r\n-Đây thực ra là dạng hàm có truyền tham số và đồng thời xét luôn giá trị mặc định cho các tham số đó.\r\n\r\nCú pháp:\r\n\r\nfunction funName(param_1 = value_1, ..., pram_n = value_2) {\r\n	//code\r\n}\r\nTrong đó:\r\n\r\nfunName là tên của hàm các bạn muốn đặt.\r\nparam_1,...,pram_n là các tham số mà các bạn muốn truyền vào hàm(không giới hạn số lượng).\r\nvalue_1,...,value_n là các giá trị tương ứng với các pram.\r\nVD: với hàm getSum ở trên mình sẽ xét tham số mặc định cho nó.\r\n\r\nfunction getSum(a = 1, b = 2) {\r\n	document.write(\'Tổng: \' + (a + b));\r\n}\r\nHàm có giá trị trả về và không\r\n-Trong javascript có hai loại hàm,đó là hàm có giá trị trả về và hàm không có giá trị trả về.\r\n\r\nĐối với hàm có giá trị trả về thì phải sử dụng từ khóa return\r\nVà ngược lại đối với hàm không có giá trị trả về thì không có từ khóa return.\r\nVD: khai báo hàm getSum ở trên là hàm có giá trị trả về.\r\n\r\nfunction getSum(a = 1, b = 2) {\r\n	return a + b;\r\n}\r\n3, Gọi hàm.\r\n-Sau khi đã tạo được hàm thì giờ các bạn chỉ cần gọi hàm thôi.\r\n\r\nHàm cơ bản\r\n-Để gọi hàm này các bạn sử dụng cú pháp:\r\n\r\nfunName();\r\nTrong đó: funName là tên của hàm các bạn muốn gọi.\r\n\r\nVD: Gọi hàm getWebsite ở trên.\r\n\r\ngetWebsite();\r\nXem Kết Quả\r\n\r\nHàm có tham số truyền vào\r\n-Để gọi dạng hàm này thì các bạn cũng dùng cú pháp như hàm cơ bản, nhưng đồng thời các bạn truyền thêm các param vào theo cú pháp:\r\n\r\nfunName(param_1, ..., param_n);\r\nVD: Ta sẽ gọi hàm getSum ở trên.\r\n\r\ngetSum(5, 6);\r\nXem Kết Quả\r\n\r\nHàm có tham số mặc định\r\n-Để gọi dạng hàm này chúng ta có thể sử dụng cách gọi hàm cơ bản nếu không muốn truyền tham số, và cách gọi hàm có tham số truyền vào nếu muốn truyền tham số cho hàm.\r\n\r\nVD: Mình sẽ gọi hàm getSum theo 2 cách.\r\n\r\ngetSum();\r\n//tạo khoảng ngăn cách cho các bạn dễ nhìn\r\ndocument.write(\'<br>__________________________________<br>\');\r\ngetSum(4, 5);\r\nXem Kết Quả\r\n\r\nHàm có giá trị trả về và không\r\n-Hàm này thì các bạn gọi như các ví dụ trên nhé.\r\n\r\nVD: Mình sẽ gọi hàm getSum ở trên.\r\n\r\nvar kq1 = getSum();\r\n//in kết quả hàm trả về\r\ndocument.write(kq1);\r\n//tạo khoảng ngăn cách cho các bạn dễ nhìn\r\ndocument.write(\'<br>__________________________________<br>\');\r\nvar kq2 = getSum(4, 5);\r\n//in kết quả hàm trả về\r\ndocument.write(kq2);\r\nXem Kết Quả\r\n\r\n4, Các ràng buộc của tên hàm.\r\n-Javascript cũng giống như các ngôn ngữ khác nó cũng có các ràng buộc về tên hàm sau đây:\r\n\r\nTên hàm phải được bắt đầu bằng chữ cái (a-z,A-Z) hoặc ký tự _.\r\nTên hàm không được bắt đầu bằng số, các ký tự khác ký tự _.\r\n5, Lời kết.\r\n-Như vậy phần này mình đã giới thiệu với các bạn về hàm trong javascript rồi, phần tiếp theo mình sẽ giới thiệu với bạn các hàm xuất ra notification(thông báo) trên trình duyệt trong javascript.\r\n\r\nNguồn: Toidicode.com\r\n\r\nNếu bạn là người có văn hóa, hãy để lại link bài viết gốc khi chia ', '1, Hàm alert().\r\n\r\n \r\n-Hàm alert() trong javascript có nhiệm vụ hiển thị ra màn hình một hộp thoại kèm theo nội dung do chúng ta setup.\r\n\r\nhàm alert trong javascript\r\n\r\nCú pháp:\r\n\r\nalert(content);\r\nTrong đó: content là nội dung mà các bạn muốn hiển thị ra ngoài màn hình, có thể là biến, hằng,...\r\n\r\nVD: Thông báo ra màn hình chữ: \'học lập trình online toidicode.com\'.\r\n\r\nalert(\'học lập trình online toidicode.com\');\r\nXem Kết Quả\r\n\r\n2, Hàm Confirm().\r\n\r\n \r\n-Hàm này cũng có tác dụng tạo ta các thông báo trên màn hình như hàm alert() và đồng thời kèm theo 2 button OK, hủy(tùy theo ngôn ngữ của trình duyệt có thể sẽ khác). Khi của sổ hiện nên nếu như người dùng chọn OK thì nó sẽ trả về TRUE và ngược lại thì nó sẽ trả về FALSE.\r\n\r\nconfirm trong javascript\r\n\r\nCú pháp:\r\n\r\nconfirm(content);\r\nTrong đó: content là nội dung mà các bạn muốn hiển thị ra ngoài màn hình, có thể là biến, hằng,...\r\n\r\nVD: Hiển thị ra màn hình đoạn text \'Bạn có phải là fan của toidicode.com không?\' và kiểm tra nếu như người dùng chọn Ok thì in ra chữ\'Cảm ơn bạn rất nhiều!\' còn chọn hủy thì in ra chữ \'Sao thế bạn?\'\r\n\r\nif (confirm(\'Bạn có phải là fan của toidicode.com không?\')) {\r\n    document.write(\'Cảm ơn bạn rất nhiều!\');\r\n} else {\r\n    document.write(\'Sao thế bạn?\');\r\n}\r\nXem Kết Quả\r\n\r\n3, Hàm Prompt().\r\n-Hàm này sẽ hiển thị ra màn hình một thông báo kèm theo một ô input cho chúng ta nhập vào nội dung. Nếu người dùng chọn hủy thì nó sẽ trả về FALSE, nếu người dùng nhập nội dung và ấn ok thì nó sẽ trả về nội dung đó.\r\n\r\nprompt trong javascript\r\n\r\nCú pháp:\r\n\r\nprompt(content);\r\nTrong đó: content là nội dung mà các bạn muốn hiển thị ra ngoài màn hình, có thể là biến, hằng,...\r\n\r\nVD: Hiển thị ra màn hình một prompt kèm thông báo \'Chào bạn, năm nay bạn bao nhiêu tuổi?\' nếu người dùng ấn hủy thì sẽ in ra dòng chữ \'Sao không trả lời à bạn?\' còn nếu người dùng nhập nội dung và ấn ok thì sẽ in ra nội dung mà người dùng vừa nhập.\r\n\r\nif (result = prompt(\'Chào bạn, năm nay bạn bao nhiêu tuổi?\')) {\r\n    document.write(result);\r\n} else {\r\n    document.write(\'Sao không trả lời à bạn?\');\r\n}\r\nXem Kết Quả\r\n\r\n4, Lời kết.\r\n-Như vậy qua phần này mình đã giới thiệu với các bạn ba hàm hiển thị thông báo ra trình duyệt trong javascript rồi. Phần tiếp theo chúng ta sẽ tìm hiểu về mảng trong javascript.', '1, Khai báo mảng.\r\n\r\n \r\n-Ở trong javascript chúng ta có thể khai báo mảng bằng 2 cách sau đây:\r\n\r\nKhai báo bằng dấu []\r\n-Đối với cách này các bạn khai báo theo cú pháp sau:\r\n\r\nvar arr = [value1, value2, ..., valuen];\r\nTrong đó:\r\n\r\narr là tên biến mảng.\r\nvalue1,...valuen là các giá trị của mảng mà các bạn muốn tạo.\r\nVD: Khai báo mảng arr gồm các số: 1,2,4,5,9,6 bằng dấu [].\r\n\r\nvar arr = [1, 2, 4, 5, 9, 6];\r\nKhai báo bằng new Array()\r\n-Đối với cách này các bạn khai báo với cú pháp như sau:\r\n\r\nvar arr = new Array(value1, value2, ..., valuen);\r\nTrong đó:\r\n\r\narr là tên biến mảng.\r\nvalue1,...valuen là các giá trị của mảng mà các bạn muốn tạo.\r\nVD: Khai báo mảng arr gồm các số: 1,2,4,5,9,6 bằng từ khóa new Arrray().\r\n\r\nvar arr = new Array(1, 2, 4, 5, 9, 6);\r\n2, Truy xuất mảng.\r\n\r\n \r\n-Sau khi đã tạo được mảng rồi thì chúng ta cần phải truy xuất thông tin của mảng. Để có thể lấy ra giá trị của một thành phần trong mảng thì chúng ta sử dụng cú pháp sau:\r\n\r\narr[index];\r\nTrong đó: arr là tên biến mảng, index là vị trí của mảng(bắt đầu từ 0).\r\n\r\nVD:\r\n\r\nvar arr = new Array(1, 2, 4, 5, 9, 6);\r\nalert(arr[1]);\r\n//result: 2\r\nXem Kết Quả\r\n\r\n3, Các hàm xử lý mảng.\r\n-Sau đây mình xin tổng hợp lại các hàm xử lý mảng mà javascript đã tích hợp sẵn cho chúng ta.\r\n\r\nLength\r\n-Đây là một thuộc tính trong mảng, trả về số lượng phần tử đang có trong mảng.\r\n\r\nCú pháp:\r\n\r\narr.length;\r\nTrong đó: arr là tên của biến mảng.\r\n\r\nVD:\r\n\r\nvar arr = new Array(1, 2, 4, 5, 9, 6);\r\nalert(arr.length);\r\nXem Kết Quả\r\n\r\nHàm join()\r\n-Hàm này có tác dụng gộp tất cả các phần tử có trong mảng thành một chuỗi.\r\n\r\nCú Pháp:\r\n\r\narr.join(string);\r\nTrong đó:\r\n\r\narr là tên biến mảng mà chúng ta cần gộp.\r\nstring là chuỗi phân cách giữa các phần tử sau khi gộp (để trống là ngăn cách bằng dấu ,).\r\nVD:\r\n\r\n//gộp mảng mặc định\r\ndocument.write(arr.join() + \'<br>\');\r\n//result: 1,2,4,5,9,6\r\n//gộp mảng ngăn cách nhau bằng -\r\ndocument.write(arr.join(\'-\') + \'<br>\');\r\n//result: 1-2-4-5-9-6\r\nXem Kết Quả\r\n\r\nHàm valueOf()\r\n-Hàm này tương tự như hàm join(), nhưng chỉ có thể nối các phần tử trong mảng bằng dấy , thôi.\r\n\r\nHàm push()\r\n-Hàm này có tác dụng thêm một hoặc nhiều phần tử vào cuối mảng.\r\n\r\nVD:\r\n\r\nvar arr = new Array(1, 2, 4, 5, 9, 6);\r\ndocument.write(arr.join() + \'<br>\');\r\n//thêm 7 vào mảng\r\narr.push(7);\r\ndocument.write(arr.join() + \'<br>\');\r\n//thêm 3,8 vào mảng\r\narr.push(3,8);\r\ndocument.write(arr.join() + \'<br>\');\r\nXem Kết Quả\r\n\r\nHàm pop()\r\n-Hàm này có tác dụng xóa phần tử cuối cùng trong mảng.\r\n\r\nVD:\r\n\r\nvar arr = new Array(1, 2, 4, 5, 9, 6);\r\ndocument.write(arr.join() + \'<br>\');\r\n//xóa phần tử cuối\r\narr.pop();\r\ndocument.write(arr.join() + \'<br>\');\r\nXem Kết Quả\r\n\r\nHàm unshift()\r\n-Hàm này có tác dụng thêm một hoặc nhiều phần tử vào đầu mảng.\r\n\r\nVD:\r\n\r\nvar arr = new Array(1, 2, 4, 5, 9, 6);\r\ndocument.write(arr.join() + \'<br>\');\r\n//thêm 7 vào mảng\r\narr.unshift(7);\r\ndocument.write(arr.join() + \'<br>\');\r\n//thêm 3,8 vào mảng\r\narr.unshift(3, 8);\r\ndocument.write(arr.join() + \'<br>\');\r\nXem Kết Quả\r\n\r\nHàm shift()\r\n-Hàm này có tác dụng xóa phần tử đầu tiên của mảng.\r\n\r\nVD:\r\n\r\nvar arr = new Array(1, 2, 4, 5, 9, 6);\r\ndocument.write(arr.join() + \'<br>\');\r\n//xóa phần tử đầu\r\narr.shift();\r\ndocument.write(arr.join() + \'<br>\');\r\nXem Kết Quả\r\n\r\nHàm splice()\r\n-Hàm này có tác dụng thêm phần tử vào mảng theo một vị trí xác định.\r\n\r\nCú pháp:\r\n\r\narr.splice(index, howmany, item1, ....., itemX)\r\nTrong đó:\r\n\r\narr là tên biến mảng các bạn muốn thêm vào.\r\nindex là vị trí mà các bạn muốn thêm phần tử vào (bắt đầu từ 0).\r\nhowmany là số phần tử sẽ xóa tính tự vị trí thêm mảng, để 0 nếu không muốn xóa phần tử nào.\r\nitem1,...itemX là giá trị của các phần tử muốn thêm vào.\r\nVD:\r\n\r\nvar arr = new Array(1, 2, 4, 5, 9, 6);\r\ndocument.write(arr.join() + \'<br>\');\r\n//thêm 2 phần tử vào vị trí thứ 1 và 0 xóa phần tử nào\r\narr.splice(1, 0, 3, 8);\r\ndocument.write(arr.join() + \'<br>\');\r\nXem Kết Quả\r\n\r\nHàm concat()\r\n-Hàm này có tác dụng ghép 2 mảng lại với nhau.\r\n\r\nVD:\r\n\r\nvar arr1 = new Array(1, 2, 4, 5, 9, 6);\r\nvar arr2 = new Array(3, 8, 7);\r\ndocument.write(arr1.concat(arr2) + \'<br>\');\r\nXem Kết Quả\r\n\r\nHàm slice()\r\n-Hàm này có tác dụng lấy ra một hoặc một số phần tử trong mảng.\r\n\r\nCú pháp:\r\n\r\narr.slice(begin,end);\r\nTrong đó:\r\n\r\narr là tên biến mảng các bạn muốn thêm vào.\r\nbegin là vị trí bắt đầu.\r\nend là vị trí kết thúc, nếu muốn cắt từ vị trí đầu đến hết thì bỏ trống giá trị này.\r\nVD:\r\n\r\nvar arr = new Array(1, 2, 4, 5, 9, 6);\r\ndocument.write(arr.join() + \'<br>\');\r\n//cắt mảng từ vị trí thứ 3 đến hết\r\ndocument.write(arr.slice(3) + \'<br>\');\r\nXem Kết Quả\r\n\r\nHàm sort()\r\n-Hàm này có tác dụng sắp xếp lại mảng theo chiều tăng dần, nếu là số thì từ bé đến lớn, chữ thì sắp xếp theo alpha(a-z).\r\n\r\nVD:\r\n\r\nvar arr = new Array(1, 2, 4, 5, 9, 6);\r\ndocument.write(arr.join() + \'<br>\');\r\n//sắp xếp lại mảng\r\ndocument.write(arr.sort() + \'<br>\');\r\nXem Kết Quả\r\n\r\nHàm reverse()\r\n-Hàm này có tác dụng đảo ngược vị trí các phần tử của mảng.\r\n\r\nVD:\r\n\r\nvar arr = new Array(1, 2, 4, 5, 9, 6);\r\ndocument.write(arr.join() + \'<br>\');\r\n//cắt mảng từ vị trí thứ 3 đến hết\r\ndocument.write(arr.reverse() + \'<br>\');\r\nXem Kết Quả\r\n\r\n3, Lời kết.\r\n-Như vậy mình đã giới thiệu xong đến mọi người về mảng trong javascript rồi, phần sau chúng ta sẽ bắt đầu chuyển qua tìm hiểu về object trong javascript.', 'tb2'),
('JS4', 'JAVASCRIPT', '1, Hằng trong javascript.\r\n\r\n \r\n-Để khai báo hằng trong javascript chúng ta sử dụng cú pháp:\r\n\r\nconst tenHang = giatri;\r\nTrong đó:\r\n\r\ntenHang: Là tên của hằng các bạn muốn đặt.\r\ngiatri: Là giá trị của hằng, có thể là số,chuỗi,mảng,object.\r\nChú ý: Tên Hằng phải được đặt theo quy tắc sau đây\r\n\r\nTên hằng bắt đầu phải là chữ cái hoặc ký tự \'_\'\r\nTên hằng không được bắt đầu bằng số.\r\nTên hằng có độ dài không giới hạn.\r\nVD:\r\n\r\n    const MyConst = 4; // đúng\r\n	const _MyConst = 4; // đúng\r\n	const __MyConst = 4; // đúng\r\n	const MyConst1 = 4; // đúng\r\n	const _MyConst1 = 4; // đúng\r\n	const __MyConst1 = 4; // đúng\r\n	const 90MyConst1 = 4; // sai\r\n	const -MyConst1 = 4; // sai\r\n2, Biến trong javascript.\r\n\r\n \r\n-Trong javascript chúng ta có thể khai báo biến bằng các cách sau đây:\r\n\r\nCách 1: Sử dụng từ khóa var.\r\n\r\nvar tenBien = giaTri;\r\nCách 2: Không cần sử dụng từ khóa.\r\n\r\ntenBien = giaTri\r\nTrong đó:\r\n\r\ntenBien: Là tên của biến các bạn muốn đặt.\r\ngiaTri: Là giá trị của biến, có thể là số,chuỗi,mảng,object.\r\nChú ý: Tên Biến phải được đặt theo quy tắc sau đây\r\n\r\nTên biến bắt đầu phải là chữ cái hoặc ký tự \'_\'\r\nTên biến không được bắt đầu bằng số.\r\nTên biến có độ dài không giới hạn.\r\nVD:\r\n\r\n	var MyVariable = 4; // đúng\r\n	var _MyVariable = 4; // đúng\r\n	var __MyVariable = 4; // đúng\r\n	var MyVariable1 = 4; // đúng\r\n	var _MyVariable1 = 4; // đúng\r\n	var __MyVariable1 = 4; // đúng\r\n	var 90MyVariable1 = 4; // sai\r\n	var -MyVariable1 = 4; // sai\r\n3, Kiểu dữ liệu trong Javascript.\r\n -Cũng giống như trong PHP biến và hằng trong javascript cũng tự detect kiểu dữ liệu của biến và hằng.\r\n\r\nVD:\r\n\r\nvar a = 5; //dữ liệu kiểu int\r\nvar a = 5.65; //dữ liệu kiểu float\r\nvar a = \'Toidicode\'; //dữ liệu kiểu string\r\nvar a = [1, 2, 3, 5, 9]; //dữ liệu kiểu array\r\nvar a = new Array(1, 2, 3, 5, 9); //dữ liệu kiểu array\r\nvar a = {\'b\': 4, \'c\': 5}; //dữ liệu kiểu object\r\n4, Hiển thị nội dung ra trình duyệt.\r\n-Trong javascript bạn có thể hiển thị nội dung ra trình duyệt bằng rất nhiều cách, nhưng trong phần này mình sẽ chỉ hướng dẫn mọi người 2 cách thông dụng nhất để các bạn có thể kiểm tra được dữ liệu.\r\n\r\nCách 1: dùng document.write() hoặc document.writeln().\r\n\r\nvar a = \'toidicode.com\';\r\ndocument.write(a);\r\nXem Kết Quả\r\n\r\nChú ý: Cách này không thể in ra được thông tin của object.\r\n\r\nCách 2: dùng console.log().\r\n\r\n    var a = \'toidicode.com\';\r\n	console.log(a);\r\nXem Kết Quả\r\n\r\n-Cách này có thể xuất được nội dung của tất cả các dạng dữ liệu và để xem được hiển thị của nó thì các bạn cần phải bật cửa sổ console của trình duyệt (thường ấn f12).\r\n\r\n5, Lời kết.', '1, Hằng trong javascript.\r\n\r\n \r\n-Để khai báo hằng trong javascript chúng ta sử dụng cú pháp:\r\n\r\nconst tenHang = giatri;\r\nTrong đó:\r\n\r\ntenHang: Là tên của hằng các bạn muốn đặt.\r\ngiatri: Là giá trị của hằng, có thể là số,chuỗi,mảng,object.\r\nChú ý: Tên Hằng phải được đặt theo quy tắc sau đây\r\n\r\nTên hằng bắt đầu phải là chữ cái hoặc ký tự \'_\'\r\nTên hằng không được bắt đầu bằng số.\r\nTên hằng có độ dài không giới hạn.\r\nVD:\r\n\r\n    const MyConst = 4; // đúng\r\n	const _MyConst = 4; // đúng\r\n	const __MyConst = 4; // đúng\r\n	const MyConst1 = 4; // đúng\r\n	const _MyConst1 = 4; // đúng\r\n	const __MyConst1 = 4; // đúng\r\n	const 90MyConst1 = 4; // sai\r\n	const -MyConst1 = 4; // sai\r\n2, Biến trong javascript.\r\n\r\n \r\n-Trong javascript chúng ta có thể khai báo biến bằng các cách sau đây:\r\n\r\nCách 1: Sử dụng từ khóa var.\r\n\r\nvar tenBien = giaTri;\r\nCách 2: Không cần sử dụng từ khóa.\r\n\r\ntenBien = giaTri\r\nTrong đó:\r\n\r\ntenBien: Là tên của biến các bạn muốn đặt.\r\ngiaTri: Là giá trị của biến, có thể là số,chuỗi,mảng,object.\r\nChú ý: Tên Biến phải được đặt theo quy tắc sau đây\r\n\r\nTên biến bắt đầu phải là chữ cái hoặc ký tự \'_\'\r\nTên biến không được bắt đầu bằng số.\r\nTên biến có độ dài không giới hạn.\r\nVD:\r\n\r\n	var MyVariable = 4; // đúng\r\n	var _MyVariable = 4; // đúng\r\n	var __MyVariable = 4; // đúng\r\n	var MyVariable1 = 4; // đúng\r\n	var _MyVariable1 = 4; // đúng\r\n	var __MyVariable1 = 4; // đúng\r\n	var 90MyVariable1 = 4; // sai\r\n	var -MyVariable1 = 4; // sai\r\n3, Kiểu dữ liệu trong Javascript.\r\n -Cũng giống như trong PHP biến và hằng trong javascript cũng tự detect kiểu dữ liệu của biến và hằng.\r\n\r\nVD:\r\n\r\nvar a = 5; //dữ liệu kiểu int\r\nvar a = 5.65; //dữ liệu kiểu float\r\nvar a = \'Toidicode\'; //dữ liệu kiểu string\r\nvar a = [1, 2, 3, 5, 9]; //dữ liệu kiểu array\r\nvar a = new Array(1, 2, 3, 5, 9); //dữ liệu kiểu array\r\nvar a = {\'b\': 4, \'c\': 5}; //dữ liệu kiểu object\r\n4, Hiển thị nội dung ra trình duyệt.\r\n-Trong javascript bạn có thể hiển thị nội dung ra trình duyệt bằng rất nhiều cách, nhưng trong phần này mình sẽ chỉ hướng dẫn mọi người 2 cách thông dụng nhất để các bạn có thể kiểm tra được dữ liệu.\r\n\r\nCách 1: dùng document.write() hoặc document.writeln().\r\n\r\nvar a = \'toidicode.com\';\r\ndocument.write(a);\r\nXem Kết Quả\r\n\r\nChú ý: Cách này không thể in ra được thông tin của object.\r\n\r\nCách 2: dùng console.log().\r\n\r\n    var a = \'toidicode.com\';\r\n	console.log(a);\r\nXem Kết Quả\r\n\r\n-Cách này có thể xuất được nội dung của tất cả các dạng dữ liệu và để xem được hiển thị của nó thì các bạn cần phải bật cửa sổ console của trình duyệt (thường ấn f12).\r\n\r\n5, Lời kết.', '1, Hằng trong javascript.\r\n\r\n \r\n-Để khai báo hằng trong javascript chúng ta sử dụng cú pháp:\r\n\r\nconst tenHang = giatri;\r\nTrong đó:\r\n\r\ntenHang: Là tên của hằng các bạn muốn đặt.\r\ngiatri: Là giá trị của hằng, có thể là số,chuỗi,mảng,object.\r\nChú ý: Tên Hằng phải được đặt theo quy tắc sau đây\r\n\r\nTên hằng bắt đầu phải là chữ cái hoặc ký tự \'_\'\r\nTên hằng không được bắt đầu bằng số.\r\nTên hằng có độ dài không giới hạn.\r\nVD:\r\n\r\n    const MyConst = 4; // đúng\r\n	const _MyConst = 4; // đúng\r\n	const __MyConst = 4; // đúng\r\n	const MyConst1 = 4; // đúng\r\n	const _MyConst1 = 4; // đúng\r\n	const __MyConst1 = 4; // đúng\r\n	const 90MyConst1 = 4; // sai\r\n	const -MyConst1 = 4; // sai\r\n2, Biến trong javascript.\r\n\r\n \r\n-Trong javascript chúng ta có thể khai báo biến bằng các cách sau đây:\r\n\r\nCách 1: Sử dụng từ khóa var.\r\n\r\nvar tenBien = giaTri;\r\nCách 2: Không cần sử dụng từ khóa.\r\n\r\ntenBien = giaTri\r\nTrong đó:\r\n\r\ntenBien: Là tên của biến các bạn muốn đặt.\r\ngiaTri: Là giá trị của biến, có thể là số,chuỗi,mảng,object.\r\nChú ý: Tên Biến phải được đặt theo quy tắc sau đây\r\n\r\nTên biến bắt đầu phải là chữ cái hoặc ký tự \'_\'\r\nTên biến không được bắt đầu bằng số.\r\nTên biến có độ dài không giới hạn.\r\nVD:\r\n\r\n	var MyVariable = 4; // đúng\r\n	var _MyVariable = 4; // đúng\r\n	var __MyVariable = 4; // đúng\r\n	var MyVariable1 = 4; // đúng\r\n	var _MyVariable1 = 4; // đúng\r\n	var __MyVariable1 = 4; // đúng\r\n	var 90MyVariable1 = 4; // sai\r\n	var -MyVariable1 = 4; // sai\r\n3, Kiểu dữ liệu trong Javascript.\r\n -Cũng giống như trong PHP biến và hằng trong javascript cũng tự detect kiểu dữ liệu của biến và hằng.\r\n\r\nVD:\r\n\r\nvar a = 5; //dữ liệu kiểu int\r\nvar a = 5.65; //dữ liệu kiểu float\r\nvar a = \'Toidicode\'; //dữ liệu kiểu string\r\nvar a = [1, 2, 3, 5, 9]; //dữ liệu kiểu array\r\nvar a = new Array(1, 2, 3, 5, 9); //dữ liệu kiểu array\r\nvar a = {\'b\': 4, \'c\': 5}; //dữ liệu kiểu object\r\n4, Hiển thị nội dung ra trình duyệt.\r\n-Trong javascript bạn có thể hiển thị nội dung ra trình duyệt bằng rất nhiều cách, nhưng trong phần này mình sẽ chỉ hướng dẫn mọi người 2 cách thông dụng nhất để các bạn có thể kiểm tra được dữ liệu.\r\n\r\nCách 1: dùng document.write() hoặc document.writeln().\r\n\r\nvar a = \'toidicode.com\';\r\ndocument.write(a);\r\nXem Kết Quả\r\n\r\nChú ý: Cách này không thể in ra được thông tin của object.\r\n\r\nCách 2: dùng console.log().\r\n\r\n    var a = \'toidicode.com\';\r\n	console.log(a);\r\nXem Kết Quả\r\n\r\n-Cách này có thể xuất được nội dung của tất cả các dạng dữ liệu và để xem được hiển thị của nó thì các bạn cần phải bật cửa sổ console của trình duyệt (thường ấn f12).\r\n\r\n5, Lời kết.', '1, Hằng trong javascript.\r\n\r\n \r\n-Để khai báo hằng trong javascript chúng ta sử dụng cú pháp:\r\n\r\nconst tenHang = giatri;\r\nTrong đó:\r\n\r\ntenHang: Là tên của hằng các bạn muốn đặt.\r\ngiatri: Là giá trị của hằng, có thể là số,chuỗi,mảng,object.\r\nChú ý: Tên Hằng phải được đặt theo quy tắc sau đây\r\n\r\nTên hằng bắt đầu phải là chữ cái hoặc ký tự \'_\'\r\nTên hằng không được bắt đầu bằng số.\r\nTên hằng có độ dài không giới hạn.\r\nVD:\r\n\r\n    const MyConst = 4; // đúng\r\n	const _MyConst = 4; // đúng\r\n	const __MyConst = 4; // đúng\r\n	const MyConst1 = 4; // đúng\r\n	const _MyConst1 = 4; // đúng\r\n	const __MyConst1 = 4; // đúng\r\n	const 90MyConst1 = 4; // sai\r\n	const -MyConst1 = 4; // sai\r\n2, Biến trong javascript.\r\n\r\n \r\n-Trong javascript chúng ta có thể khai báo biến bằng các cách sau đây:\r\n\r\nCách 1: Sử dụng từ khóa var.\r\n\r\nvar tenBien = giaTri;\r\nCách 2: Không cần sử dụng từ khóa.\r\n\r\ntenBien = giaTri\r\nTrong đó:\r\n\r\ntenBien: Là tên của biến các bạn muốn đặt.\r\ngiaTri: Là giá trị của biến, có thể là số,chuỗi,mảng,object.\r\nChú ý: Tên Biến phải được đặt theo quy tắc sau đây\r\n\r\nTên biến bắt đầu phải là chữ cái hoặc ký tự \'_\'\r\nTên biến không được bắt đầu bằng số.\r\nTên biến có độ dài không giới hạn.\r\nVD:\r\n\r\n	var MyVariable = 4; // đúng\r\n	var _MyVariable = 4; // đúng\r\n	var __MyVariable = 4; // đúng\r\n	var MyVariable1 = 4; // đúng\r\n	var _MyVariable1 = 4; // đúng\r\n	var __MyVariable1 = 4; // đúng\r\n	var 90MyVariable1 = 4; // sai\r\n	var -MyVariable1 = 4; // sai\r\n3, Kiểu dữ liệu trong Javascript.\r\n -Cũng giống như trong PHP biến và hằng trong javascript cũng tự detect kiểu dữ liệu của biến và hằng.\r\n\r\nVD:\r\n\r\nvar a = 5; //dữ liệu kiểu int\r\nvar a = 5.65; //dữ liệu kiểu float\r\nvar a = \'Toidicode\'; //dữ liệu kiểu string\r\nvar a = [1, 2, 3, 5, 9]; //dữ liệu kiểu array\r\nvar a = new Array(1, 2, 3, 5, 9); //dữ liệu kiểu array\r\nvar a = {\'b\': 4, \'c\': 5}; //dữ liệu kiểu object\r\n4, Hiển thị nội dung ra trình duyệt.\r\n-Trong javascript bạn có thể hiển thị nội dung ra trình duyệt bằng rất nhiều cách, nhưng trong phần này mình sẽ chỉ hướng dẫn mọi người 2 cách thông dụng nhất để các bạn có thể kiểm tra được dữ liệu.\r\n\r\nCách 1: dùng document.write() hoặc document.writeln().\r\n\r\nvar a = \'toidicode.com\';\r\ndocument.write(a);\r\nXem Kết Quả\r\n\r\nChú ý: Cách này không thể in ra được thông tin của object.\r\n\r\nCách 2: dùng console.log().\r\n\r\n    var a = \'toidicode.com\';\r\n	console.log(a);\r\nXem Kết Quả\r\n\r\n-Cách này có thể xuất được nội dung của tất cả các dạng dữ liệu và để xem được hiển thị của nó thì các bạn cần phải bật cửa sổ console của trình duyệt (thường ấn f12).\r\n\r\n5, Lời kết.', 'nc'),
('CSS1', 'CSS', 'CSS là gì ?\r\nCSS là viết tắt của Cascading Style Sheet, là một Design Language đơn giản được sử dụng để làm đơn giản hóa tiến trình trình bày các trang web.\r\n\r\nCó thể hiểu đơn giản là, CSS xử lý phần Look và Feel của một trang web. Sử dụng CSS, bạn có thể điều khiển màu văn bản (text color), font style, khoảng cách giữa các đoạn văn, kích cỡ các cột, hình nền hoặc màu nền, ….\r\n\r\nNói chung, học CSS là khá đơn giản. Bạn sẽ tìm thấy điều này sau khi đọc loạt bài hướng dẫn về CSS của chúng mình. Để giúp bạn học tập và thực hành một cách tốt nhất, chúng mình cung cấp rất nhiều ví dụ minh họa và kèm theo phần giải thích chi tiết giúp bạn hiểu nhanh và sâu hơn chủ đề vừa đọc.\r\n\r\nLợi thế của CSS\r\nCSS tiết kiệm thời gian và công sức: Nếu bạn đã học qua về HTML, bạn sẽ thấy một điều rằng: HTML không chứa bất cứ một thẻ nào để định dạng một trang web. HTML được tạo để miêu tả nội dung của một trang web, ví dụ như:\r\n\r\nĐây là tiêu đề\r\nĐây là đoạn văn.\r\n\r\nBắt đầu từ HTML 3.2, các thẻ như <font> và các thuộc tính như color được thêm vào, và vào thời điểm đó, đây là cơn ác mộng đối với các lập trình viên phát triển web. Việc thiết kế các trang web lớn, với thông tin về font và color trải dài qua nhiều trang đơn, thì việc xác định font và thêm thuộc tính color vào các trang này tốn rất nhiều thời gian và công sức.\r\n\r\nĐể xử lý vấn đề này, World Wide Web Consortium (W3C) đã tạo ra CSS. Và từ đó, với CSS, lập trình viên tiết kiệm khá nhiều thời gian và công sức. Thay vì phải thêm font và color cho từng trang web một, giờ đây, họ chỉ cần tạo một .css file ở ngoài, và sau đó include vào từng trang web. Và khi đó, bạn có thể thay đổi Look và Feel của cả một Website lớn chỉ trong một thời gian rất ngắn bằng cách tạo các thay đổi trong .css file.\r\n\r\nSử dụng CSS giúp webpage tải nhanh hơn: Sử dụng CSS, bạn không cần phải viết từng thuộc tính cho từng thẻ HTML mỗi khi cần đến. Bạn chỉ cần viết một CSS rule trong .css file và áp dụng cho tất cả các thẻ đó. Ít code hơn tức là sẽ giúp webpage của bạn tải nhanh hơn.\r\n\r\nSử dụng CSS giúp bạn dễ dàng duy trì webpage hơn.\r\n\r\nCSS có nhiều thuộc tính hơn HTML. Do đó, sử dụng CSS giúp bạn tạo tạo các webpage đẹp hơn nhiều khi so sánh với việc sử dụng các thẻ và thuộc tính HTML thuần.\r\n\r\nSử dụng CSS là phù hợp với chuẩn Quốc tế. Hiện tại, rất nhiều thuộc tính của HTML đã trở thành cũ và nhiều trình duyệt không còn hỗ trợ chúng nữa. Do đó, để tương thích với các trình duyệt trong tương lai, bạn nên sử dụng CSS.\r\n\r\nLịch sử CSS\r\nCSS được phát triển bởi Håkon Wium Lie vào 10/10/1994 và được duy trì bởi một nhóm CSS Working Group của W3C. Nhóm này duy trì và công bố các tài liệu mới nhất về CSS.\r\n\r\n\r\n \r\nLịch sử các phiên bản của CSS\r\nCSS1 (Cascading Style Sheets 1) được công bố bởi W3C vào 12/1996. Phiên bản này miêu tả ngôn ngữ CSS cũng như mô hình định dạng đơn giản đầu tiên cho tất cả các thẻ HTML.\r\n\r\nCSS2 được công bố vào 5/1998, được phát triển dựa trên CSS1. Phiên bản này bổ sung sự hỗ trợ tới một số thiết bị (như máy in, …), các thiết bị về âm thanh, các bảng, …\r\n\r\nCSS3 được công bố vào 6/1999. Tại phiên bản này, CSS được phân chia thành các Module nhỏ và từng Module chịu trách nhiệm cho một tính năng cụ thể nào đó, ví dụ:\r\n\r\nSelector\r\nBox Model\r\nBackgrounds và Borders\r\nText Effect\r\n2D/3D Transformation\r\nAnimation\r\nUser Interface', 'CSS được tạo thành từ các Style Rule. Các rule này được thông dịch bởi trình duyệt và sau đó được áp dụng tới các phần tử tương ứng trong tài liệu của bạn. Style Rule bao gồm ba phần:\r\n\r\nSelector: (hiểu nôm na là bộ chọn phần tử) Một selector là một thẻ HTML mà tại đó một bạn áp dụng một style cho nó. Đó có thể là bất kỳ một thẻ HTML nào, như thẻ div, thẻ span, thẻ p, …\r\n\r\nProperty: (thuộc tính) Là property của một kiểu thuộc tính của thẻ HTML. Nói một cách đơn giản thì tất cả các thuộc tính trong HTML được chuyển đổi thành các CSS property. Đó có thể là color, border....\r\n\r\nValue: Là các giá trị được gán cho các property. Ví dụ, color có thể có các giá trị là red #F1F1F1 etc.\r\n\r\nDưới đây là cú pháp CSS chung:\r\n\r\nselector { property: value }\r\nCú pháp CSS\r\nTrong ví dụ trên, selector trỏ tới phần tử HTML là h1. Đây là phần tử mà mình muốn tạo style cho nó.\r\n\r\nKhối khai báo Declaration có thể bao gồm một hoặc nhiều khối và được đặt phân biệt nhau bởi dấu chấm phảy.\r\n\r\nMỗi khối khai báo này bao gồm một tên của CSS property (trong ví dụ là color và font-size) và một giá trị (trong ví dụ là blue và 12px) được gán cho property đó.\r\n\r\nBạn cần chú ý một điều rằng, một khai báo CSS luôn luôn kết thúc với một dấu chấm phảy và phần khai báo này sẽ được bao quanh bởi cặp dấu ngoặc ôm.\r\n\r\nTrong ví dụ tiếp theo, tất cả các phần tử\r\n\r\nsẽ được căn chỉnh theo lề trái và có màu là màu đỏ:\r\n\r\np {\r\n    color: red;\r\n    text-align: left;\r\n}\r\n\r\nCác loại Selector trong CSS (hoặc CSS Selector)\r\n\r\n \r\nElement Selector trong CSS\r\nHiểu nôm na là bộ chọn phần tử. Element Selector này sẽ chọn các phần tử dựa trên tên của chúng. Như trong ví dụ trên, chúng ta chọn phần tử p (hay là thẻ p – trong HTML, mỗi thẻ là một phần tử) và áp dụng style cho phần tử này. Có nhiều cách chọn phần tử khác nhau, và tùy theo mục đích thì bạn có thể sử dụng Type Selector, Universal Selector, hoặc Descendant Selector.\r\n\r\np {\r\n    text-align: center;\r\n    color: red;\r\n}\r\nType Selector trong CSS\r\nCũng giống như trong ví dụ trên, ví dụ sau sẽ áp dụng màu cho thẻ h1.\r\n\r\nh1 {\r\n   color: #36CFFF; \r\n}\r\nUniversal Selector trong CSS\r\nNếu bạn muốn áp dụng một style nào đó cho tất cả các thẻ HTML trong tài liệu, bạn có thể sử dụng cú pháp giống như dưới đây.\r\n\r\n* { \r\n   color: #000000; \r\n}\r\nDescendant Selector trong CSS\r\nGiả sử bạn chỉ muốn áp dụng style này cho một phần tử mà là con của phần tử khác (phần tử con là phần tử mà nằm bên trong phần tử khác). Ví dụ sau sẽ áp dụng style cho phần tử vietjack chỉ khi nào nó nằm bên trong thẻ <div>:\r\n\r\nul em {\r\n   color: #000000; \r\n}\r\nClass Selector trong CSS\r\nTương tự như ID Selector, bạn cũng có thể áp dụng các Style Rule cho các phần tử dựa trên thuộc tính class của phần tử đó.\r\n\r\nĐể chọn các phần tử với một class cụ thể, bạn viết một dấu chấm (.) ở trước tên class của phần tử đó.\r\n\r\nVí dụ dưới đây sẽ định nghĩa Style Rule cho tất cả phần tử HTML với class= \"center\":\r\n\r\n.center {\r\n    text-align: center;\r\n    color: red;\r\n}\r\n\r\nVới trường hợp có nhiều phần tử với cùng một class, nếu bạn chỉ muốn áp dụng style rule cho một phần tử nào đó, bạn viết tên phần tử đó trước cú pháp trên, như sau:\r\n\r\ndiv.center {\r\n    text-align: center;\r\n    color: red;\r\n}\r\n\r\nCác phần tử HTML có thể tham chiếu tới nhiều class. Do đó, bạn có thể áp dụng nhiều Style Rule cho một phần tử (chẳng hạn div) với các class = \"center\" (như trên) và class = \"black\" (để xác định màu đen chẳng hạn), như sau:\r\n\r\n<div class=\"center black\">\r\n   DIV này sẽ được tạo style bởi hai class là center và black.\r\n</div>\r\n\r\n \r\nID Selector trong CSS\r\nID Selector sử dụng thuộc tính id của một phần tử HTML để chọn một phần tử cụ thể. Trong một webpage, mỗi phần tử nên có một id duy nhất, vì thế ID Selector được sử dụng để lựa chọn một phần tử duy nhất.\r\n\r\n#black {\r\n   color: #000000; \r\n}\r\nĐể lựa chọn một phần tử với một id cụ thể, bạn viết một ký tự # (đọc là ký tự hash) ở trước id của phần tử đó.\r\n\r\nh1#black {\r\n   color: #000000; \r\n}\r\nVí dụ dưới đây sẽ áp dụng style rule cho phần tử có id= \"para1\";\r\n\r\n#para1 {\r\n    text-align: center;\r\n    color: red;\r\n}\r\n\r\nBạn cũng có thể xác định cụ thể hơn như trong ví dụ sau:\r\n\r\ndiv#para1 {\r\n    text-align: center;\r\n    color: red;\r\n}\r\n\r\nStyle Rule này sẽ chỉ áp dụng cho các phần tử div có id là para1.\r\n\r\nNgoài ra, nếu bạn muốn áp dụng style rule cho một phần tử mà là con của (hay nằm trong) phần tử khác, bạn có thể sử dụng:\r\n\r\n#para1 div {\r\n    text-align: center;\r\n    color: red;\r\n}\r\n\r\nStyle Rule này sẽ áp dụng cho phần tử div là phần tử con của phần tử có id là para1.\r\n\r\nChild Selector trong CSS\r\nPhần trên bạn đã tìm hiểu về Descendant Selector. Ngoài ra, còn có một kiểu Selector nữa mà khá giống với kiểu này. Bạn theo dõi ví dụ:\r\n\r\nbody > p {\r\n   color: #000000; \r\n}\r\nStyle Rule này sẽ được áp dụng cho tất cả các phần tử p mà trực tiếp là con của phần tử body. Các phần tử p khác nằm bên trong các phần tử như div hoặc td sẽ không bị tác động.\r\n\r\nAttribute Selector trong CSS\r\nBạn cũng có thể áp dụng style cho các phần tử HTML có các thuộc tính cụ thể nào đó. Ví dụ sau sẽ áp dụng style rule cho tất cả phần tử input nào mà có thuộc tính type= \"text\".\r\n\r\ninput[type = \"text\"]{\r\n   color: #000000; \r\n}\r\nPhương thức này đem lại lợi thế: phần tử <input type = \"submit\" /> sẽ không bị tác động bởi style rule trên, và color sẽ chỉ được áp dụng cho trường text.\r\n\r\nSau đây là ví dụ về một số rule áp dụng cho Attribute Selector:\r\n\r\n\r\n \r\np[lang] : lựa chọn tất cả phần tử p mà có thuộc tính lang.\r\n\r\np[lang=\"fr\"] : lựa chọn tất cả phần tử p mà có thuộc tính lang có giá trị chính xác là fr.\r\n\r\np[lang~=\"fr\"]: lựa chọn tất cả phần tử p mà có thuộc tính lang có giá trị có chứa từ fr.\r\n\r\np[lang|=\"en\"] : lựa chọn tất cả phần tử p mà có thuộc tính lang có giá trị chính xác là en hoặc bắt đầu với en.\r\n\r\nMultiple Style Rule trong CSS\r\nBạn có thể định nghĩa nhiều style rule cho cùng một phần tử. Tuy nhiên, thay vì viết nhiều Style Rule riêng biệt để áp dụng cho chỉ một phần tử, thì bạn có thể viết gộp như sau:\r\n\r\nh1 {\r\n   color: #36C;\r\n   font-weight: normal;\r\n   letter-spacing: .4em;\r\n   margin-bottom: 1em;\r\n   text-transform: lowercase;\r\n}\r\nNhư trên, tất cả các cặp property và value được phân biệt bởi dấu chấm phảy (;). Tùy theo phong cách của mình, bạn có thể viết chúng trên cùng một dòng hay trên nhiều dòng. Nhưng tốt hơn hết, để cho code của bạn dễ đọc và dễ duy trì, bạn nên viết từng cặp trên từng dòng riêng biệt.\r\n\r\nKhi lần đầu tiên nhìn vào ví dụ trên, có thể bạn sẽ không hiểu các property này có tác dụng gì. Hãy bình tĩnh, bởi vì chúng ta mới bắt đầu học mà. Nếu bạn muốn biết ngay tác dụng của chúng, bạn có thể tham khảo chi tiết về tất cả property trong CSS tại đây..\r\n\r\nGrouping Selector trong CSS\r\nCó một tình huống xảy ra là giả sử bạn muốn áp dụng cùng một style rule cho nhiều phần tử khác nhau. Nếu theo những gì đã học ở trên, bạn phải viết lần lượt từng style rule này cho từng phần tử. Như vậy cũng được, nhưng hãy tưởng tượng nếu số lượng phần tử là lớn và việc lặp đi lặp lại này có thể sẽ tốn khá nhiều thời gian. Có cách nào tốt hơn không. Có.\r\n\r\nBạn hãy nhóm tất cả các phần tử này lại, và sau đó áp dụng style rule chung mà bạn muốn áp dụng cho chúng. Đó cũng chính là ý nghĩa của Grouping Selector trong CSS. Bạn theo dõi ví dụ sau:\r\n\r\nh1, h2, h3 {\r\n   color: #36C;\r\n   font-weight: normal;\r\n   letter-spacing: .4em;\r\n   margin-bottom: 1em;\r\n   text-transform: lowercase;\r\n}\r\nStyle rule này sẽ áp dụng cho các phần tử h1, h2, và h3. Bạn cần chú ý là giữa các phần tử này phải có dấu phảy (,) nhé. Đó là cú pháp chung. Sử dụng Grouping Selector sẽ giúp bạn tiết kiệm được thời gian và tối thiểu hóa được lượng code mà bạn cần viết.\r\n\r\nTương tự, nếu bạn muốn áp dụng cho nhiều class, thì bạn có thể sử dụng nhiều Class Selector trong CSS như ví dụ dưới đây:\r\n\r\n#content, #footer, #supplement {\r\n   position: absolute;\r\n   left: 510px;\r\n   width: 200px;\r\n}\r\nComment trong CSS\r\nComment đôi khi đóng vai trò khá quan trọng trong lập trình. Nó cung cấp nhiều thông tin hữu ích cho người đọc, giúp họ (hay chính bạn khi cần xem lại code) hiểu được những gì bạn đang thực hiện.\r\n\r\nComment trong CSS bắt đầu với /* và kết thúc với */. Comment cũng có thể trải rộng trên nhiều dòng. Ví dụ:\r\n\r\np {\r\n    color: red;\r\n    /* vi du ve comment nam tren mot dong */\r\n    text-align: center;\r\n}\r\n\r\n/* vi du ve\r\n  comment nam \r\n  tren nhieu dong \r\n */\r\n\r\nVí dụ\r\n<!DOCTYPE html>\r\n<html>\r\n   <head>\r\n      <style>\r\n         p {\r\n            color: red;\r\n            /* Vi du ve comment tren mot dong */\r\n            text-align: center;\r\n         }\r\n         /* Vi du ve comment \r\n         	tren nhieu dong\r\n         	trong CSS\r\n         */\r\n      </style>\r\n   </head>\r\n   <body>\r\n      <p>Hoc CSS co ban tai VietJack!</p>\r\n   </body>\r\n</html>\r\nKết quả là:\r\n\r\n\r\nTheo dõi chúng tôi miễn phí trên mạng xã hội faceb', 'Có 4 cách khác nhau để nhúng CSS vào trong tài liệu HTML và hai cách được sử dụng phổ biến nhất đó là Inline CSS và External CSS.\r\n\r\nSử dụng Internal CSS\r\nNhúng CSS trong HTML sử dụng phần tử <style>\r\nCách này đơn giản và nên chỉ áp dụng với những ứng dụng webpage nhỏ. Bạn có thể nhúng CSS vào trong tài liệu HTML của bạn bởi sử dụng phần tử style. Thẻ này được đặt bên trong các thẻ <head>...</head>. Style Rule được định nghĩa trong khu vực này sẽ chỉ tác động đến các phần tử trong nội bộ trang đó. Ví dụ sau minh họa cú pháp sử dụng chung và vị trí nhúng CSS vào trong HTML:\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n   <head>\r\n   \r\n      <style type = \"text/css\" media = \"all\">\r\n         body {\r\n            background-color: linen;\r\n         }\r\n         h1 {\r\n            color: maroon;\r\n            margin-left: 40px;\r\n         }\r\n      </style>\r\n      \r\n   </head>   \r\n   <body>\r\n      <h1>Day la phan tieu de cho tai lieu</h1>\r\n      <p>Day la vi du mot doan van trong tai lieu.</p>\r\n   </body>\r\n</html>\r\nKết quả là:\r\n\r\n\r\n\r\n \r\nGiải thích các Thuộc tính trong CSS\r\nTiếp theo, mình sẽ giải thích các thuộc tính trong CSS đã áp dụng cho thẻ style được sử dụng trong ví dụ trên:\r\n\r\nThuộc tính	Giá trị	Miêu tả\r\ntype	text/css	Thuộc tính type trong CSS này là bắt buộc. Nó báo cho tài liệu HTML của bạn biết rằng bạn đang nhúng CSS vào trong tài liệu HTML.\r\nmedia	\r\nscreen\r\n\r\ntty\r\n\r\ntv\r\n\r\nprojection\r\n\r\nhandheld\r\n\r\nprint\r\n\r\nbraille\r\n\r\naural\r\n\r\nall\r\n\r\nThuộc tính media trong CSS nói cho HTML biết về kiểu thiết bị mà tài liệu này sẽ được hiển thị trên đó. Giá trị mặc định là all. Đây là một thuộc tính tùy ý trong CSS.\r\nInline CSS – Sử dụng thuộc tính style\r\nỞ trên, bạn đã nhúng CSS vào trong HTML bởi sử dụng thẻ style, và sử dụng cách này thì style rule sẽ là có sẵn (có sẵn tức là bạn có thể áp dụng cho phần tử nào cũng được) cho tất cả các phần tử trong trang đó. Tiếp theo, mình trình bày cách nhúng CSS trong HTML bởi sử dụng thuộc tính style của các thẻ HTML. Làm theo cách này thì style rule sẽ chỉ được áp dụng cho phần tử đó. Cú pháp chung như sau:\r\n\r\n<tenPhanTu style = \"...style rules....\">\r\n\r\n \r\nGiải thích các Thuộc tính\r\nThuộc tính	Giá trị	Miêu tả\r\nstyle	style rule	Chắc bạn đã biết và hiểu qua về thuộc tính style của các thẻ HTML. Nó báo cho HTML về style mà bạn muốn áp dụng cho phần tử mà bạn đã chọn. Giá trị của thuộc tính style là tổ hợp của các Style Declaration ( xem lại chương Cú pháp CSS) và chúng được tách biệt với nhau bởi dấu chấm phảy (;).\r\nVí dụ\r\nVí dụ sau minh họa Inline CSS theo cú pháp trên:\r\n\r\n<html>\r\n   <head>\r\n   </head>\r\n   <body>\r\n      <h1 style = \"color:#36C;\"> Vi du ve Inline CSS </h1>\r\n   </body>\r\n</html>\r\nKết quả là:\r\n\r\n\r\nTuy nhiên, sử dụng cách này có thể làm nội dung trình bày của bạn có thể bị xáo trộn, do đó bạn nên ít sử dụng.\r\n\r\nSử dụng External CSS - Sử dụng phần tử <link>\r\nVới những ứng dụng Website lớn mà có nhiều page, thì cách tốt nhất là bạn nên sử dụng phần tử <link> để include (hay nhúng) CSS file vào trong tài liệu HTML. Làm theo cách này, bạn chỉ cần sửa đổi một file, thì bạn đã có thể sửa đổi toàn bộ phần Look và Feel cho cả Website.\r\n\r\nCSS file này là một text file và có đuôi là .css. Bạn định nghĩa tất cả style rule bên trong file này và sau đó bạn có thể include file vào trong bất kỳ trang HTML nào bởi sử dụng thẻ <link>.\r\n\r\n\r\n \r\nCú pháp cho thẻ <link> để nhúng CSS vào trong HTML như sau:\r\n\r\n<head>\r\n   <link type = \"text/css\" href = \"...\" media = \"...\" />\r\n</head>\r\nGhi chú:\r\n\r\nThẻ <link> này phải được đặt trong các thẻ <head></head>\r\n\r\nCSS file không nên bao gồm bất cứ thẻ HTML nào.\r\n\r\nCSS file được lưu dưới đuôi .css.\r\n\r\nThuộc tính\r\nGiải thích các thuộc tính được sử dụng trong cú pháp trên:\r\n\r\nThuộc tính	Giá trị	Miêu tả\r\ntype	text/css	Thuộc tính type trong CSS này là bắt buộc. Nó báo cho tài liệu HTML của bạn biết rằng bạn đang nhúng CSS vào trong tài liệu HTML.\r\nhref	URL	Thuộc tính href xác định đường link tới css file có chứa style rule mà bạn đã định nghĩa. Thuộc tính này là bắt buộc.\r\nmedia	\r\nscreen\r\n\r\ntty\r\n\r\ntv\r\n\r\nprojection\r\n\r\nhandheld\r\n\r\nprint\r\n\r\nbraille\r\n\r\naural\r\n\r\nall\r\n\r\nThuộc tính media trong CSS nói cho HTML biết về kiểu thiết bị mà tài liệu này sẽ được hiển thị trên đó. Giá trị mặc định là all. Đây là một thuộc tính tùy ý trong CSS.\r\nVí dụ\r\nGiả sử, mình xác định một style rule đơn giản và đặt nó trong vietjack.css có nội dung như sau:\r\n\r\nh1, h2, h3 {\r\n   color: #36C;\r\n   font-weight: normal;\r\n   letter-spacing: .4em;\r\n   margin-bottom: 1em;\r\n   text-transform: lowercase;\r\n}\r\nBây giờ, mình có thể nhúng vietjack.css vào trong HTML như sau:\r\n\r\n<head>\r\n   <link type = \"text/css\" href = \"vietjack.css\" media = \" all\" />\r\n</head>\r\nImport CSS - Qui tắc @import trong CSS\r\nÝ nghĩa của việc sử dụng qui tắc @import là tương tự như khi sử dụng phần tử <link> để nhúng CSS file vào trong HTML. Cú pháp của qui tắc @import trong CSS như sau:\r\n\r\n<head>\r\n   <@import \"URL\";\r\n</head>\r\nỞ đây, URL sẽ là địa chỉ trỏ đến css file mà bạn đã định nghĩa. Bạn cũng có thể sử dụng một cú pháp khác tương tự là:\r\n\r\n<head>\r\n   <@import url(\"URL\");\r\n</head>\r\nVí dụ\r\nVí dụ sau minh họa cách nhúng vietjack.css vào trong HTML.\r\n\r\n<head>\r\n   @import \"vietjack.css\";\r\n</head>\r\nQui tắc áp dụng Style Rule khi có nhiều CSS rule\r\nĐôi khi xảy ra một tình huống là: bạn đã định nghĩa một style cho một phần tử nào đó (h1 chẳng hạn) trong css file, nhưng sau đó có thể do bạn quên, bạn lại định nghĩa lại trong tài liệu HTML bởi sử dụng theo cách Internal CSS, thì câu hỏi đặt ra là phần tử h1 này sẽ áp dụng theo style nào. Dưới đây là một số qui tắc chỉ ra mức độ ưu tiên của từng cách thức đã được trình bày ở trên.\r\n\r\nInline CSS có quyền ưu tiên cao nhất. Vì thế, trong trường hợp có nhiều style khác nhau được áp dụng cho một thuộc tính của một phần tử, thì Inline CSS sẽ có quyền ưu tiên cao nhất, nó sẽ ghi đè các style rule còn lại được xác định trong thẻ <style>...</style> hoặc trong External CSS file.\r\n\r\nRule được định nghĩa trong thẻ <style>...</style> sẽ ghi đè rule được định nghĩa trong External CSS file.\r\n\r\n\r\n \r\nRule được định nghĩa trong External CSS file có mức độ ưu tiên thấp nhất. Nó sẽ chỉ được áp dụng trên một phần tử khi không bị ghi đè hay không có hai rule trên cùng định nghĩa trên phần tử đó.\r\n\r\nCách xử lý CSS với một số trình duyệt cũ\r\nCó nhiều trình duyệt cũ không hỗ trợ CSS. Do đó, bạn cần cẩn trọng trong khi nhúng CSS vào trong HTML. Để xử lý trường hợp này, bạn làm theo cách sau để ẩn CSS đối với các trình duyệt cũ.\r\n\r\n<style type=\"text/css\">\r\n   <!--\r\n      body, td {\r\n         color: blue;\r\n      }\r\n   -->\r\n</style>', 'Trong cuộc sống hàng ngày chúng ta có nhiều đơn vị để cân, đo, đong đếm mọi thứ hữu hình, ví dụ như cm, km, kg, … Vậy, với một trang web, để xác định xem phần tử này phải nằm ở khu vực này, hình ảnh kia phải hiển thị ở chỗ kia, thì ta phải dùng đơn vị gì để xác định. Mét, kilomet hay centimet.\r\n\r\nChương này sẽ giúp bạn làm quen một số đơn vị được sử dụng thường xuyên trong CSS.\r\n\r\nĐơn vị	Miêu tả	Ví dụ\r\n%	Đơn vị %, là đơn vị tham chiếu tỉ lệ so với một phần tử mẹ dựa vào kích thước. Ví dụ: bạn có một khung mẹ có kích thước là 400px và bạn muốn đặt một khung khác vào bên trong khung mẹ này. Tùy theo lựa chọn thì khung con này sẽ có nhiều kích thước, và tương ứng với kích thước khung mẹ thì bạn sẽ có tỉ lệ tương ứng. Ví dụ: nếu là 50% thì khung con có kích thước là 200px	p {font-size: 16pt; line-height: 125%;}\r\ncm	Đơn vị centimet	div {margin-bottom: 2cm;}\r\nem	Một đơn vị được sử dụng cho chiều cao của font. Một đơn vị em tương đương với kích cỡ của một font đã cho, nếu bạn gán kích cỡ của font là 12pt thì mỗi đơn vị em sẽ là 12pt, do đó 2em sẽ là 24pt	p {letter-spacing: 7em;}\r\nex	Đơn vị được sử dụng cho chiều cao của chữ cái x thường (hay là x-height)	p {font-size: 24pt; line-height: 3ex;}\r\nin	Đơn vị inch (=2.54 cm)	p {word-spacing: .15in;}\r\nmm	Đơn vị milimet	p {word-spacing: 15mm;}\r\npc	Đơn vị pica. Một pica = 12 point và do đó 1 inch = 6 pica	p {font-size: 20pc;}\r\npt	Đơn vị point. 1 inch = 72 point	body {font-size: 18pt;}\r\npx	Đơn vị được sử dụng trên màn hình hiển thị, một px sẽ tương đương với một điểm ảnh trên màn hình. Chất lượng của điểm ảnh sẽ hoàn toàn khác nhau trên một số thiết bị, ví dụ như một điểm ảnh trên các thiết bị in ấn sẽ khác một điểm ảnh trên các thiết bị màn hình có độ phân giải thấp.	p {padding: 25px;}', 'cb');
INSERT INTO `document` (`MaMH`, `TenMH`, `Phan1`, `Phan2`, `Phan3`, `Phan4`, `MaLevel`) VALUES
('CSS2', 'CSS', 'Sử dụng Hex Code để xác định màu trong CSS\r\nMỗi giá trị màu có thể được xác định bởi một giá trị Hex Code gồm 6 chữ số. Hai chữ số đầu tiên biểu diễn một giá trị RED, hai chữ số tiếp theo biểu diễn một giá trị GREEN và hai chữ số cuối cùng biểu diễn giá trị BLUE.\r\n\r\nMỗi giá trị Hex Code này được đặt trước bởi một ký hiệu #.\r\n\r\nColor	Color HEX\r\n 	#000000\r\n 	#FF0000\r\n 	#00FF00\r\n 	#0000FF\r\n 	#FFFF00\r\n 	#00FFFF\r\n 	#FF00FF\r\n 	#C0C0C0\r\n 	#FFFFFF\r\nSử dụng Short Hex Code để xác định màu trong CSS\r\nĐây là dạng rút gọn của Hex Code. Bạn nhìn lại phần cú pháp bên trên, và đọc lại phần Hex Code, bạn sẽ thấy rằng cứ mỗi cặp hai chữ số (cặp RR, cặp GG, cặp BB) trong Hex Code được rút gọn thành một chữ số tương ứng trong Short Hex Code. Ví dụ: nếu trong Hex Code bạn xác định giá trị màu là #66AA77 thì trong Short Hex Code giá trị sẽ là #6A7. Hai giá trị là tương đương.\r\n\r\nColor	Color HEX\r\n 	#000\r\n 	#F00\r\n 	#0F0\r\n 	#0FF\r\n 	#FF0\r\n 	#0FF\r\n 	#F0F\r\n 	#FFF\r\n\r\n \r\nSử dụng RGB để xác định màu trong CSS\r\nGiá trị màu có thể được xác định bởi sử dụng thuộc tính rgb(). Property này nhận ba giá trị, mỗi giá trị tương ứng cho RED, GREEN và BLUE. Giá trị có thể là số nguyên hoặc dạng phần trăm (%).\r\n\r\nGhi chú : Tất cả trình duyệt không hỗ trợ thuộc tính rgb(). Vì thế tốt nhất là bạn không nên sử dụng chúng.\r\n\r\nColor	Color RGB\r\n 	rgb(0,0,0)\r\n 	rgb(255,0,0)\r\n 	rgb(0,255,0)\r\n 	rgb(0,0,255)\r\n 	rgb(255,255,0)\r\n 	rgb(0,255,255)\r\n 	rgb(255,0,255)\r\n 	rgb(192,192,192)\r\n 	rgb(255,255,255)\r\nSử dụng tên màu để xác định màu trong CSS\r\nBạn có thể sử dụng tên màu (bằng tiếng Anh) để xác định giá trị màu trong CSS. Tên màu trong CSS là không phân biệt kiểu chữ, do đó Red là tương đương với red và RED.\r\n\r\nSafe Color cho trình duyệt\r\nBảng dưới liệt kê 216 màu được coi như là Safe Color cho các trình duyệt. Các màu này bảo đảm rằng tất cả các mày tính sẽ hiển thị màu một cách chính xác khi gặp bất kỳ màu nào trong 216 trong bảng dưới đây:\r\n\r\n000000	000033	000066	000099	0000CC	0000FF\r\n003300	003333	003366	003399	0033CC	0033FF\r\n006600	006633	006666	006699	0066CC	0066FF\r\n009900	009933	009966	009999	0099CC	0099FF\r\n00CC00	00CC33	00CC66	00CC99	00CCCC	00CCFF\r\n00FF00	00FF33	00FF66	00FF99	00FFCC	00FFFF\r\n330000	330033	330066	330099	3300CC	3300FF\r\n333300	333333	333366	333399	3333CC	3333FF\r\n336600	336633	336666	336699	3366CC	3366FF\r\n339900	339933	339966	339999	3399CC	3399FF\r\n33CC00	33CC33	33CC66	33CC99	33CCCC	33CCFF\r\n33FF00	33FF33	33FF66	33FF99	33FFCC	33FFFF\r\n660000	660033	660066	660099	6600CC	6600FF\r\n663300	663333	663366	663399	6633CC	6633FF\r\n666600	666633	666666	666699	6666CC	6666FF\r\n669900	669933	669966	669999	6699CC	6699FF\r\n66CC00	66CC33	66CC66	66CC99	66CCCC	66CCFF\r\n66FF00	66FF33	66FF66	66FF99	66FFCC	66FFFF\r\n990000	990033	990066	990099	9900CC	9900FF\r\n993300	993333	993366	993399	9933CC	9933FF\r\n996600	996633	996666	996699	9966CC	9966FF\r\n999900	999933	999966	999999	9999CC	9999FF\r\n99CC00	99CC33	99CC66	99CC99	99CCCC	99CCFF\r\n99FF00	99FF33	99FF66	99FF99	99FFCC	99FFFF\r\nCC0000	CC0033	CC0066	CC0099	CC00CC	CC00FF\r\nCC3300	CC3333	CC3366	CC3399	CC33CC	CC33FF\r\nCC6600	CC6633	CC6666	CC6699	CC66CC	CC66FF\r\nCC9900	CC9933	CC9966	CC9999	CC99CC	CC99FF\r\nCCCC00	CCCC33	CCCC66	CCCC99	CCCCCC	CCCCFF\r\nCCFF00	CCFF33	CCFF66	CCFF99	CCFFCC	CCFFFF\r\nFF0000	FF0033	FF0066	FF0099	FF00CC	FF00FF\r\nFF3300	FF3333	FF3366	FF3399	FF33CC	FF33FF\r\nFF6600	FF6633	FF6666	FF6699	FF66CC	FF66FF\r\nFF9900	FF9933	FF9966	FF9999	FF99CC	FF99FF\r\nFFCC00	FFCC33	FFCC66	FFCC99	FFCCCC	FFCCFF\r\nFFFF00	FFFF33	FFFF66	FFFF99	FFFFCC	FFFFFF', 'Để xác định các hiệu ứng liên quan tới background cho các phần tử trong HTML, bạn có thể sử dụng các thuộc tính background trong CSS.\r\n\r\nThuộc tính background-color: thuộc tính này được sử dụng để thiết lập màu nền của một phần tử.\r\n\r\nThuộc tính background-image: thuộc tính này được sử dụng để thiết lập hình nền cho một phần tử.\r\n\r\nThuộc tính background-repeat: thuộc tính này được sử dụng để điều khiển sự lặp đi lặp lại của một hình ảnh nền theo chiều dọc hoặc chiều ngang.\r\n\r\nThuộc tính background-position: thuộc tính này được sử dụng để điều khiển vị trí của một hình ảnh nền.\r\n\r\nThuộc tính background-attachment: thuộc tính này được sử dụng để xác định xem có hay không một hình nền là cố định hoặc có thể scroll với phần còn lại của trang.\r\n\r\nThuộc tính background: sử dụng thuộc tính này nếu bạn muốn viết ít code hơn mà vẫn xác định được tất cả các thuộc tính liên quan tới background ở trên cho hình nền.\r\n\r\nThiết lập màu nền trong CSS\r\nĐể thiết lập màu nền trong CSS, bạn sử dụng thuộc tính background-color. Ví dụ sau minh họa cách thiết lập màu nền cho một phần tử trong CSS. Như trong chương trước đã trình bày, để thiết lập giá trị màu trong CSS, bạn có thể sử dụng tên màu, giá trị Hex Code, giá trị Short Hex Code hoặc thuộc tính rgb().\r\n\r\n<html>\r\n   <head>\r\n   <body>\r\n      <p style = \"background-color:yellow;\">\r\n      Phan noi dung nay co Background Color la mau vang.</p>\r\n   </body>\r\n   </head>\r\n<html>', 'Thiết lập hình nền trong CSS\r\nĐể thiết lập màu nền trong CSS, bạn sử dụng thuộc tính background-image. Giá trị url ở đây xác định đường dẫn đến nơi bạn lưu giữ hình ảnh.\r\n\r\n<html>\r\n   <head>\r\n      <style>\r\n         body  {\r\n            background-image: url(\"../css/images/css.jpg\");\r\n            background-color: #cccccc;\r\n         }\r\n      </style>\r\n      <body>\r\n         <h1>Hoc CSS co ban tai VietJack!</h1>\r\n      </body>\r\n   </head>\r\n<html>\r\nLặp lại hình nền trong CSS\r\nNếu bạn muốn hình nền của mình lặp đi lặp lại theo chiều ngang hoặc theo chiều dọc, bạn có thể sử dụng thuộc tính background-repeat trong CSS. Thuộc tính này có các giá trị:\r\n\r\nrepeat: Giá trị mặc định. Hình nền sẽ được lặp đi lặp lại theo cả chiều dọc lẫn chiều ngang.\r\n\r\nrepeat-x: Hình nền sẽ chỉ được lặp đi lặp lại theo chiều ngang.\r\n\r\nrepeat-y: Hình nền sẽ chỉ được lặp đi lặp lại theo chiều dọc.\r\n\r\nno-repeat: Hình nền sẽ không được lặp đi lặp lại.\r\n\r\nDưới đây là các ví dụ minh họa cho các giá trị của thuộc tính backgroud-color. Để thực hành, bạn nên chọn các hình ảnh có kích cỡ nhỏ để thấy rõ hiệu ứng.\r\n\r\nTheo mặc định, thuộc tính background-repeat sẽ có giá trị repeat.\r\n\r\n<html>\r\n   <head>\r\n      <style>\r\n         body {\r\n            background-image: url(\"../css/images/css.jpg\");\r\n            background-repeat: repeat;\r\n         }\r\n      </style>\r\n   </head>\r\n   <body>\r\n      <p>Vi du ve gia tri mac dinh cua thuoc tinh background-repeat trong CSS.</p>\r\n   </body>\r\n</html>\r\nKết quả là:\r\n\r\n\r\n\r\n \r\nVí dụ tiếp theo minh họa cách lặp hình nền theo chiều dọc bởi sử dụng giá trị repeat-y của thuộc tính background-color:\r\n\r\n<html>\r\n   <head>\r\n      <style>\r\n         body {\r\n            background-image: url(\"../css/images/css.jpg\");\r\n            background-repeat: repeat-y;\r\n         }\r\n      </style>\r\n   </head>\r\n   <body>\r\n      <p>Vi du ve gia tri repeat-y cua thuoc tinh background-repeat trong CSS.</>\r\n   </body>\r\n</html>\r\nKết quả là:\r\n\r\n\r\nVí dụ tiếp theo minh họa cách lặp hình nền theo chiều ngang bởi sử dụng giá trị repeat-x của thuộc tính background-color:\r\n\r\n<html>\r\n   <head>\r\n      <style>\r\n         body {\r\n            background-image: url(\"../css/images/css.jpg\");\r\n            background-repeat: repeat-x;\r\n         }\r\n      </style>\r\n   </head>\r\n   <body>\r\n      <p>Vi du ve gia tri repeat-x cua thuoc tinh background-repeat trong CSS.</>\r\n   </body>\r\n</html>\r\nKết quả là:\r\n\r\n\r\nThiết lập vị trí hình nền trong CSS\r\nĐể thiết lập vị trí cho hình nền, bạn sử dụng thuộc tính background-position trong CSS. Đơn vị thường được sử dụng để xác định giá trị cho thuộc tính background-position này là px.\r\n\r\nVí dụ sau minh họa cách thiết lập vị trí hình nền cách cạnh trái 100 px.\r\n\r\n<html>\r\n   <head>\r\n      <style>\r\n         body {\r\n            background-image: url(\"../css/images/css.jpg\");\r\n            background-position:100px;\r\n         }\r\n      </style>\r\n   </head>\r\n   <body>\r\n      <p>Vi du ve dat hinh nen tai mot vi tri cu the.</>\r\n   </body>\r\n</html>\r\nKết quả là:\r\n\r\n\r\nVí dụ sau minh họa cách thiết lập vị trí hình nền cách cạnh trái 100 px, và cạnh trên 200px.', 'Ví dụ sau minh họa cách thiết lập vị trí hình nền cách cạnh trái 100 px, và cạnh trên 200px.\r\n\r\n<html>\r\n   <head>\r\n      <style>\r\n         body {\r\n            background-image: url(\"../css/images/css.jpg\");\r\n            background-position:100px 200px;\r\n         }\r\n      </style>\r\n   </head>\r\n   <body>\r\n      <p>Vi tri hinh nen duoc xac dinh la: 100px va 200px.</>\r\n   </body>\r\n</html>\r\nKết quả là:\r\n\r\n\r\nThiết lập vị trí hình nền trong CSS\r\nNếu bạn muốn thiết lập hình nền là cố định hay là có thể scroll được, bạn sử dụng thuộc tính background-attachment trong CSS. Thuộc tính này nhận hai giá trị là fixed và scroll tương ứng. Hai ví dụ dưới đây minh họa cách sử dụng hai giá trị này của thuộc tính background-attachment trong CSS.\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n   <head>\r\n   \r\n      <style>\r\n         body  {\r\n            background-image: url();\r\n            background-repeat: no-repeat;\r\n            background-attachment: fixed;\r\n         }\r\n      </style>\r\n      \r\n   </head>\r\n   <body>\r\n   \r\n      <p>Hinh nen duoc dat co dinh. Ban khong the Scroll.</p>\r\n      \r\n   </body>\r\n</html>\r\nKết quả là:\r\n\r\n\r\nVí dụ sau minh họa cách thiết lập cho hình nền có thể Scroll:\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n   <head>\r\n   \r\n      <style>\r\n         body  {\r\n            background-image: url();\r\n            background-repeat: no-repeat;\r\n            background-attachment:scroll;\r\n         }.\r\n      </style>\r\n      \r\n   </head>\r\n   <body>\r\n   \r\n      <p>Vi du minh hoa cho gia tri scroll cua thuoc tinh background-attachment.</p>\r\n      <p>Voi gia tri nay, ban co the scroll hinh nen.</p>\r\n      \r\n   </body>\r\n</html>\r\nKết quả là:\r\n\r\n\r\nThuộc tính background trong CSS\r\nĐể tối thiểu lượng code cần viết, bạn có thể sử dụng thuộc tính background trong CSS để xác định các thuộc tính liên quan tới hình nền. Thứ tự các giá trị thuộc tính khi bạn sử dụng thuộc tính background là:\r\n\r\nbackground-color\r\n\r\nbackground-image\r\n\r\nbackground-repeat\r\n\r\nbackground-attachment\r\n\r\nbackground-position\r\n\r\n\r\n \r\nSẽ không có vấn đề gì nếu một giá trị nào đó không được xác định, miễn là các thuộc tính đã được thiết lập vẫn theo thứ tự.\r\n\r\n<p style=\"background:url(../css/images/hinh_anh_nen.gif) repeat fixed;\">\r\n   Doan van nay co hinh nen co dinh (gia tri fixed) va co the lap di lap lai (gia tri repeat)!\r\n</p>', 'tb1'),
('CSS3', 'CSS', 'CSS là gì ?\r\nCSS là viết tắt của Cascading Style Sheet, là một Design Language đơn giản được sử dụng để làm đơn giản hóa tiến trình trình bày các trang web.\r\n\r\nCó thể hiểu đơn giản là, CSS xử lý phần Look và Feel của một trang web. Sử dụng CSS, bạn có thể điều khiển màu văn bản (text color), font style, khoảng cách giữa các đoạn văn, kích cỡ các cột, hình nền hoặc màu nền, ….\r\n\r\nNói chung, học CSS là khá đơn giản. Bạn sẽ tìm thấy điều này sau khi đọc loạt bài hướng dẫn về CSS của chúng mình. Để giúp bạn học tập và thực hành một cách tốt nhất, chúng mình cung cấp rất nhiều ví dụ minh họa và kèm theo phần giải thích chi tiết giúp bạn hiểu nhanh và sâu hơn chủ đề vừa đọc.\r\n\r\nLợi thế của CSS\r\nCSS tiết kiệm thời gian và công sức: Nếu bạn đã học qua về HTML, bạn sẽ thấy một điều rằng: HTML không chứa bất cứ một thẻ nào để định dạng một trang web. HTML được tạo để miêu tả nội dung của một trang web, ví dụ như:\r\n\r\nĐây là tiêu đề\r\nĐây là đoạn văn.\r\n\r\nBắt đầu từ HTML 3.2, các thẻ như <font> và các thuộc tính như color được thêm vào, và vào thời điểm đó, đây là cơn ác mộng đối với các lập trình viên phát triển web. Việc thiết kế các trang web lớn, với thông tin về font và color trải dài qua nhiều trang đơn, thì việc xác định font và thêm thuộc tính color vào các trang này tốn rất nhiều thời gian và công sức.\r\n\r\nĐể xử lý vấn đề này, World Wide Web Consortium (W3C) đã tạo ra CSS. Và từ đó, với CSS, lập trình viên tiết kiệm khá nhiều thời gian và công sức. Thay vì phải thêm font và color cho từng trang web một, giờ đây, họ chỉ cần tạo một .css file ở ngoài, và sau đó include vào từng trang web. Và khi đó, bạn có thể thay đổi Look và Feel của cả một Website lớn chỉ trong một thời gian rất ngắn bằng cách tạo các thay đổi trong .css file.\r\n\r\nSử dụng CSS giúp webpage tải nhanh hơn: Sử dụng CSS, bạn không cần phải viết từng thuộc tính cho từng thẻ HTML mỗi khi cần đến. Bạn chỉ cần viết một CSS rule trong .css file và áp dụng cho tất cả các thẻ đó. Ít code hơn tức là sẽ giúp webpage của bạn tải nhanh hơn.\r\n\r\nSử dụng CSS giúp bạn dễ dàng duy trì webpage hơn.\r\n\r\nCSS có nhiều thuộc tính hơn HTML. Do đó, sử dụng CSS giúp bạn tạo tạo các webpage đẹp hơn nhiều khi so sánh với việc sử dụng các thẻ và thuộc tính HTML thuần.\r\n\r\nSử dụng CSS là phù hợp với chuẩn Quốc tế. Hiện tại, rất nhiều thuộc tính của HTML đã trở thành cũ và nhiều trình duyệt không còn hỗ trợ chúng nữa. Do đó, để tương thích với các trình duyệt trong tương lai, bạn nên sử dụng CSS.\r\n\r\nLịch sử CSS\r\nCSS được phát triển bởi Håkon Wium Lie vào 10/10/1994 và được duy trì bởi một nhóm CSS Working Group của W3C. Nhóm này duy trì và công bố các tài liệu mới nhất về CSS.', 'Lịch sử các phiên bản của CSS\r\nCSS1 (Cascading Style Sheets 1) được công bố bởi W3C vào 12/1996. Phiên bản này miêu tả ngôn ngữ CSS cũng như mô hình định dạng đơn giản đầu tiên cho tất cả các thẻ HTML.\r\n\r\nCSS2 được công bố vào 5/1998, được phát triển dựa trên CSS1. Phiên bản này bổ sung sự hỗ trợ tới một số thiết bị (như máy in, …), các thiết bị về âm thanh, các bảng, …\r\n\r\nCSS3 được công bố vào 6/1999. Tại phiên bản này, CSS được phân chia thành các Module nhỏ và từng Module chịu trách nhiệm cho một tính năng cụ thể nào đó, ví dụ:\r\n\r\nSelector\r\nBox Model\r\nBackgrounds và Borders\r\nText Effect\r\n2D/3D Transformation\r\nAnimation\r\nUser Interface', 'CSS được tạo thành từ các Style Rule. Các rule này được thông dịch bởi trình duyệt và sau đó được áp dụng tới các phần tử tương ứng trong tài liệu của bạn. Style Rule bao gồm ba phần:\r\n\r\nSelector: (hiểu nôm na là bộ chọn phần tử) Một selector là một thẻ HTML mà tại đó một bạn áp dụng một style cho nó. Đó có thể là bất kỳ một thẻ HTML nào, như thẻ div, thẻ span, thẻ p, …\r\n\r\nProperty: (thuộc tính) Là property của một kiểu thuộc tính của thẻ HTML. Nói một cách đơn giản thì tất cả các thuộc tính trong HTML được chuyển đổi thành các CSS property. Đó có thể là color, border....\r\n\r\nValue: Là các giá trị được gán cho các property. Ví dụ, color có thể có các giá trị là red #F1F1F1 etc.\r\n\r\nDưới đây là cú pháp CSS chung:\r\n\r\nselector { property: value }Cú pháp CSS\r\nTrong ví dụ trên, selector trỏ tới phần tử HTML là h1. Đây là phần tử mà mình muốn tạo style cho nó.\r\n\r\nKhối khai báo Declaration có thể bao gồm một hoặc nhiều khối và được đặt phân biệt nhau bởi dấu chấm phảy.\r\n\r\nMỗi khối khai báo này bao gồm một tên của CSS property (trong ví dụ là color và font-size) và một giá trị (trong ví dụ là blue và 12px) được gán cho property đó.\r\n\r\nBạn cần chú ý một điều rằng, một khai báo CSS luôn luôn kết thúc với một dấu chấm phảy và phần khai báo này sẽ được bao quanh bởi cặp dấu ngoặc ôm.\r\n\r\nTrong ví dụ tiếp theo, tất cả các phần tử\r\n\r\nsẽ được căn chỉnh theo lề trái và có màu là màu đỏ:\r\n\r\np {\r\n    color: red;\r\n    text-align: left;\r\n}', 'CSS được tạo thành từ các Style Rule. Các rule này được thông dịch bởi trình duyệt và sau đó được áp dụng tới các phần tử tương ứng trong tài liệu của bạn. Style Rule bao gồm ba phần:\r\n\r\nSelector: (hiểu nôm na là bộ chọn phần tử) Một selector là một thẻ HTML mà tại đó một bạn áp dụng một style cho nó. Đó có thể là bất kỳ một thẻ HTML nào, như thẻ div, thẻ span, thẻ p, …\r\n\r\nProperty: (thuộc tính) Là property của một kiểu thuộc tính của thẻ HTML. Nói một cách đơn giản thì tất cả các thuộc tính trong HTML được chuyển đổi thành các CSS property. Đó có thể là color, border....\r\n\r\nValue: Là các giá trị được gán cho các property. Ví dụ, color có thể có các giá trị là red #F1F1F1 etc.\r\n\r\nDưới đây là cú pháp CSS chung:\r\n\r\nselector { property: value }Cú pháp CSS\r\nTrong ví dụ trên, selector trỏ tới phần tử HTML là h1. Đây là phần tử mà mình muốn tạo style cho nó.\r\n\r\nKhối khai báo Declaration có thể bao gồm một hoặc nhiều khối và được đặt phân biệt nhau bởi dấu chấm phảy.\r\n\r\nMỗi khối khai báo này bao gồm một tên của CSS property (trong ví dụ là color và font-size) và một giá trị (trong ví dụ là blue và 12px) được gán cho property đó.\r\n\r\nBạn cần chú ý một điều rằng, một khai báo CSS luôn luôn kết thúc với một dấu chấm phảy và phần khai báo này sẽ được bao quanh bởi cặp dấu ngoặc ôm.\r\n\r\nTrong ví dụ tiếp theo, tất cả các phần tử\r\n\r\nsẽ được căn chỉnh theo lề trái và có màu là màu đỏ:\r\n\r\np {\r\n    color: red;\r\n    text-align: left;\r\n}\r\nCác loại Selector trong CSS (hoặc CSS Selector)\r\n\r\n \r\nElement Selector trong CSS\r\nHiểu nôm na là bộ chọn phần tử. Element Selector này sẽ chọn các phần tử dựa trên tên của chúng. Như trong ví dụ trên, chúng ta chọn phần tử p (hay là thẻ p – trong HTML, mỗi thẻ là một phần tử) và áp dụng style cho phần tử này. Có nhiều cách chọn phần tử khác nhau, và tùy theo mục đích thì bạn có thể sử dụng Type Selector, Universal Selector, hoặc Descendant Selector.\r\n\r\np {\r\n    text-align: center;\r\n    color: red;\r\n}\r\nType Selector trong CSS\r\nCũng giống như trong ví dụ trên, ví dụ sau sẽ áp dụng màu cho thẻ h1.\r\n\r\nh1 {\r\n   color: #36CFFF; \r\n}\r\nUniversal Selector trong CSS\r\nNếu bạn muốn áp dụng một style nào đó cho tất cả các thẻ HTML trong tài liệu, bạn có thể sử dụng cú pháp giống như dưới đây.\r\n\r\n* { \r\n   color: #000000; \r\n}\r\nDescendant Selector trong CSS\r\nGiả sử bạn chỉ muốn áp dụng style này cho một phần tử mà là con của phần tử khác (phần tử con là phần tử mà nằm bên trong phần tử khác). Ví dụ sau sẽ áp dụng style cho phần tử vietjack chỉ khi nào nó nằm bên trong thẻ <div>:\r\n\r\nul em {\r\n   color: #000000; \r\n}\r\nClass Selector trong CSS\r\nTương tự như ID Selector, bạn cũng có thể áp dụng các Style Rule cho các phần tử dựa trên thuộc tính class của phần tử đó.\r\n\r\nĐể chọn các phần tử với một class cụ thể, bạn viết một dấu chấm (.) ở trước tên class của phần tử đó.\r\n\r\nVí dụ dưới đây sẽ định nghĩa Style Rule cho tất cả phần tử HTML với class= \"center\":\r\n\r\n.center {\r\n    text-align: center;\r\n    color: red;\r\n}\r\nVới trường hợp có nhiều phần tử với cùng một class, nếu bạn chỉ muốn áp dụng style rule cho một phần tử nào đó, bạn viết tên phần tử đó trước cú pháp trên, như sau:\r\n\r\ndiv.center {\r\n    text-align: center;\r\n    color: red;\r\n}\r\nCác phần tử HTML có thể tham chiếu tới nhiều class. Do đó, bạn có thể áp dụng nhiều Style Rule cho một phần tử (chẳng hạn div) với các class = \"center\" (như trên) và class = \"black\" (để xác định màu đen chẳng hạn), như sau:\r\n\r\n<div class=\"center black\">\r\n   DIV này sẽ được tạo style bởi hai class là center và black.\r\n</div>', 'tb2'),
('CSS4', 'CSS', 'Phan1css-nc', 'phan2css-nc', 'phan3css-nc', 'phan4css-nc', 'nc'),
('HTML1', 'HTML', 'phan1html-cb', 'phan2html-cb', 'phan3thml-cb', 'phan4html-cb', 'cb'),
('HTML2', 'HTML', 'phan1html-tb1', 'phan2html-tb1', 'phan3thml-tb1', 'phan4html-tb1', 'tb1'),
('HTML3', 'HTML', 'phan1html-tb2', 'phan2html-tb2', 'phan3thml-tb2', 'phan4html-tb2', 'tb2'),
('HTML4', 'HTML', 'phan1html-nc', 'phan2html-nc', 'phan3thml-nc', 'phan4html-nc', 'nc'),
('NJS1', 'NODEJS', 'phan1node-cb', 'phan2node-cb', 'phan3node-cb', 'phan4node-cb', 'cb'),
('NJS2', 'NODEJS', 'phan1node-tb1', 'phan2node-tb1', 'phan3node-tb1', 'phan4node-tb1', 'tb1'),
('NJS3', 'NODEJS', 'phan1node-tb2', 'phan2node-tb2', 'phan3node-tb2', 'phan4node-tb2', 'tb2'),
('NJS4', 'NODEJS', 'phan1node-nc', 'phan2node-nc', 'phan3node-nc', 'phan4node-nc', 'nc'),
('PHP1', 'PHP', 'phan1php-cb', 'phan2php-cb', 'phan3php-cb', 'phan4php-cb', 'cb'),
('PHP2', 'PHP', 'phan1php-tb1', 'phan2php-tb1', 'phan3php-tb1', 'phan4php-tb1', 'tb1'),
('PHP3', 'PHP', 'phan1php-tb2', 'phan2php-tb2', 'phan3php-tb2', 'phan4php-tb2', 'tb2'),
('PHP4', 'PHP', 'phan1php-nc', 'phan2php-nc', 'phan3php-nc', 'phan4php-nc', 'nc'),
('T1', 'TOAN', 'phan1toan-cb', 'phan2toan-cb', 'phan3toan-cb', 'phan4toan-cb', 'cb'),
('T2', 'TOAN', 'phan1toan-tb1', 'phan2toan-tb1', 'phan3toan-tb1', 'phan4toan-tb1', 'tb1'),
('T3', 'TOAN', 'phan1toan-tb2', 'phan2tona-tb2', 'phan3toan-tb2', 'phan4toan-tb2', 'tb2'),
('T4', 'TOAN', 'phan1toan-nc', 'phan2toan-nc', 'phan3toan-nc', 'phan4toan-nc', 'nc'),
('VL1', 'VAT LY', 'phan1vatly-cb', 'phan2vatly-cb', 'phan3vatly-cb', 'phan4vatly-cb', 'cb'),
('VL2', 'VAT LY', 'phan1vatly-tb1', 'phan2vatly-tb1', 'phan3vatly-tb1', 'phan4vatly-tb1', 'tb1'),
('VL3', 'VAT LY', 'phan1vatly-tb2', 'phan2vatly-tb2', 'phan3vatly-tb2', 'phan4vatly-tb2', 'tb2'),
('VL4', 'VAT LY', 'phan1vatly-nc', 'phan2vatly-nc', 'phan3vatly-nc', 'phan4vatly-nc', 'nc');
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
